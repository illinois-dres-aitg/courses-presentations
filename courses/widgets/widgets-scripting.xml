<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="funct.css" type="text/css"?>
<?xm-well_formed path="funct.dtd"?>
<slides>
 <lang>en</lang>
  <title>Introduction Accessible Web Wdigets with ARIA</title>
  <person>
    <name>Jon Gunderson, Ph.D.</name>
    <desc href="http://disability.illinois.edu">Division of Disability Resources and Educational Services</desc>
    <desc href="http://ahs.illinois.edu">College of Applied Health Sciences</desc>
    <desc href="http://illinois.edu">University of Illinois at Urbana-Champaign</desc>
    <desc href="mailto:jongund@illinois.edu">jongund@illinois.edu</desc>
  </person>

  <desc href="http://disability.illinois.edu/academic-support/accessible-it-group/badging">Illinois A11y Badges</desc>

  <stylesheet media="screen">../../common/css/bootstrap.min.css</stylesheet>
  <stylesheet media="screen">../../common/css/bootstrap-theme.min.css</stylesheet>
  <stylesheet media="screen">../../common/css/bootstrap-accessibility.css</stylesheet>

  <stylesheet media="screen">../../common/css/xml-slides.css</stylesheet>

  <script>../../common/js/jquery-2.1.1.min.js</script>
  <script>../../common/js/bootstrap.min.js</script>
  <script>../../common/js/bootstrap-accessibility.min.js</script>
  <script>../../common/js/xml-slides.js</script>

  <slide>
    <title>Overview</title>
    <contents>
      <ul>
        <li>Brief History of WCAG 2.0, ARIA and HTML5</li>
        <li>ARIA basics</li>
        <li>Checkbox Example</li>
        <li>ARIA Design Patterns
          <ul>
            <li>Disclosure (Hide/Show)</li>
            <li>Menu Button</li>
            <li>Menubar</li>
            <li>Navigation Menus</li>
            <li>Image Carousel</li>
          </ul>
        </li>
        <li>Authoring Resources</li>
        <li>Open Source Evaluation and Inspection Tools</li>
      </ul>
      <script type="text/javascript">
        slideShowURL()
      </script>
    </contents>
  </slide>

  <slide>
    <title>Web Content Accessibility Guidelines 2.0</title>
    <contents>
      <p class="center">
        <a href="https://www.w3.org/TR/WCAG20" target="_specification">Web Content Accessibility Guidelines 2.0</a>
      </p>
      <iframe src="https://www.w3.org/TR/WCAG20/" title="WCAG 2.0 specfication" width="90%" height="600px"/>
    </contents>
  </slide>

  <slide>
    <title>Web Content Accessibility Guidelines 2.0 Quickref</title>
    <contents>
      <p class="center">
        <a href="https://www.w3.org/WAI/WCAG20/quickref/" target="_specification">Web Content Accessibility Guidelines 2.0 Quickref</a>
      </p>
      <iframe src="https://www.w3.org/WAI/WCAG20/quickref/" width="90%" height="600px"/>
    </contents>
  </slide>

  <slide>
    <title>Accessible Rich Internet Applications (ARIA) 1.0</title>
    <contents>
      <p class="center">
        <a href="https://www.w3.org/TR/wai-aria" target="_specification">Accessible Rich Internet Applications 1.0</a>
      </p>
      <iframe src="https://www.w3.org/TR/wai-aria/" title="ARIA 1.0 specfication" width="90%" height="600px"/>
    </contents>
  </slide>

  <slide>
    <title>HTML 5</title>
    <contents>
      <p class="center">
        <a href="https://www.w3.org/TR/html5" target="_specification">HTML 5 Specification</a>
      </p>
      <iframe src="https://www.w3.org/TR/html5/" title="HTML5 specfication" width="90%" height="600px"/>
    </contents>
  </slide>

  <slide>
    <title>HTML5: main element</title>
    <contents>
      <p class="center">
        <a href="https://www.w3.org/TR/html5/grouping-content.html#the-main-element" target="_specification">HTML 5: main element</a>
      </p>
      <iframe src="https://www.w3.org/TR/html5/grouping-content.html#the-main-element" title="HTML5 MAIN element specfication" width="90%" height="600px"/>
    </contents>
  </slide>


  <slide>
    <title>HTML5: role restrictions</title>
    <contents>
      <p class="center">
        <a href="https://www.w3.org/TR/html5/grouping-content.html#the-li-element" target="_specification">HTML 5: role restrctions</a>
      </p>
      <iframe src="https://www.w3.org/TR/html5/grouping-content.html#the-li-element" title="HTML5 LI element specfication" width="90%" height="600px"/>
    </contents>
  </slide>

  <slide>
    <title>Accessible Rich Internet Application API Mappings</title>
    <contents>
      <p class="center">
        <a href="https://www.w3.org/TR/core-aam-1.1/" target="_specification">Core Accessibility API Mappings for ARIA 1.1</a>
      </p>
      <iframe src="https://www.w3.org/TR/core-aam-1.1/" title="Core Accessibility API Mappings for ARIA 1.1" width="90%" height="600px"/>
    </contents>
  </slide>


  <slide>
    <title>HTML API Mappings</title>
    <contents>
      <p class="center">
        <a href="https://w3c.github.io/html-aam/" target="_specification">HTML5 Accessibility API Mappings 1.0</a>
      </p>
      <iframe src="https://w3c.github.io/html-aam/" title="HTML5 Accessibility API Mappings 1.0" width="90%" height="600px"/>
    </contents>
  </slide>

  <slide>
    <title>The Problem of Custom Wigets</title>
    <contents>
      <h2>Problem</h2>
      <ul>
        <li>Starting arounf the year 2000 developers and designers started using HTML+CSS+Javascript to create <em>custom user interface widgets</em> (e.g. interactive controls) for web pages.</li>
        <li>There was no standard and interoperable way to make these <em>custom widgets</em> accessible.</li>
      </ul>

      <h2>Issues</h2>
      <ul>
        <li>Keyboard support.</li>
        <li>Describing the widget behavior (e.g. role).</li>
        <li>Labeling the features of the widget (e.g. accessible name).</li>
        <li>Identifying properties and states. (e.g. checked, exapnded, has popup)</li>
        <li>Communicating information through platform specific accessibility APIs.</li>
        <li>Interoperability between browser and accessibility APIs.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Purpose of ARIA to Describe Behavior and Features</title>
    <contents>
       <ul>
         <li>Provide an interoperable way to describe the features of <em>custom widgets</em>:
           <ul>
             <li><strong>Role:</strong> Describes the type of widget, which implies the <em>keyboard interaction</em>.</li>
             <li><strong>Properties and States:</strong> Describing features like "expandable", "checked" or "selected".</li>
             <li><strong>Language independence:</strong> Roles, properties and states can be translated by the operating systems and assistive technologies to local languages.</li>
             <li><strong>Labeling:</strong> How to label the features of the widget and its components (e.g. accessible name).</li>
             <li><strong>Relationships:</strong> How different components relate to each other (e.g. descriptions, controls, owns).</li>
             <li><strong>Grouping:</strong> Groups of related components (e.g. lists, menus, trees, tab panels).</li>
           </ul>
        </li>
        <li>Define markup mappings to accessibility APIs:
          <ul>
            <li>ATK/AT-SPI (Linux/Unix)</li>
            <li>Microsoft Active Accessibility (MSAA) + IAccessible2</li>
            <li>Microsoft UI Automate</li>
            <li>MacOS Accessibility API</li>
          </ul>
         </li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>ARIA Contract with Browsers and Assistive Technologies</title>
    <contents>
      <h2>Browsers</h2>
      <ul>
        <li>The use of ARIA markup does not affect browser behavior or rendering.</li>
        <li>ARIA only affects how information is represented in accessibility APIs (e.g. MSAA+IAccessible2, ATK+SPI, UIAutomate, MacOS).</li>
      </ul>

      <h2>Asssitive Technologies</h2>
      <ul>
        <li>Do not specify what assistive technologies will do with the information.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Accessible Rich Internet Applications (ARIA) Basics</title>
    <contents>

      <table class="table table-striped table-hover" aria-labelledby="id1">
        <thead>
          <tr>
            <th>Feature</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>tabindex</td>
            <td>
              <ul>
                <li>Used for identifying elements that can receive keyboard focus.</li>
                <li><code>tabindex=-1</code>: Element can receive keyboard focus, but not in tab order of page.</li>
                <li><code>tabindex=0</code>: Element can receive keyboard focus, is included in tab order of page.</li>
                <li><code>tabindex&gt;0</code>: Element can receive keyboard focus, but changes tab order of page <br/>(<strong>NOTE:</strong> <code>tabindex&gt;0</code> is rarely if ever used, has many browser compatibility issues).</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>Keyboard focus</td>
            <td>
              <ul>
                <li>Javascript <code>focus()</code> method to move keyboard focus to a DOM node using javascript.</li>
                <li>Visually styling keyboard focus:
                  <ul>
                    <li>Mimic the mouse hover styling to match look and feel or website, to make it feel an integral part of the website design.</li>
                    <li>Include a strong visual CSS <code>border</code> or <code>outline</code> to make the focus standout as users tab through the page.</li>
                  </ul>
                </li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>role</td>
            <td>
              <ul>
                <li>Attribute to define the type of widget in the web resource.</li>
                <li>
                  Based on the <a href="http://www.w3.org/TR/2007/WD-xhtml-role-20071004/" target="_specification">XHTML Role Attribute Module</a>.
                </li>
                <li>
                  ARIA roles defined in the <a href="https://www.w3.org/TR/wai-aria-1.1/#widget_roles" target="_specification">Accessible Rich Internet Application</a> specification.
                </li>
              </ul></td>
          </tr>
          <tr>
            <td>Accessible Name</td>
            <td>
              <ul>
                <li><code>aria-labelledby</code> attribute: List of <code>IDREF</code>s to elements with text content on the page.</li>
                <li><code>aria-label</code> attribute: String defining the accessible name.</li>
                <li>Text content of the element with widget role (e.g. text of menu item).</li>
                <li><code>title</code> attribute: String defining the accessible name (e.g. name of last resort).</li>
                <li><a href="https://www.w3.org/TR/accname-aam-1.1/">Accessible name algorithm</a></li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>Properties and States</td>
            <td>
              <ul>
                <li>
                  <a href="http://www.w3.org/TR/aria-state/"  target="_specification">States and Properties Module</a> for
                    Accessible Rich Internet Applications (WAI-ARIA States and Properties).
                </li>
                <li>aria-checked</li>
                <li>aria-describedby</li>
                <li>aria-haspopup</li>
                <li>aria-expanded</li>
                <li>many others...</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>Accessible Description</td>
            <td>
              <ul>
                <li><code>aria-describedby</code> attribute: List of <code>IDREF</code>s to elements with text content on the page.</li>
                <li><code>title</code> attribute: String defining the accessible name (e.g. name of last resort).</li>
                <li><a href="https://www.w3.org/TR/accname-aam-1.1/">Accessible description algorithm</a></li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>W3C Authoring Resources</td>
            <td>
              <ul>
                <li><a href="http://www.w3.org/TR/wai-aria-practices/" target="_specification">WAI-ARIA Authoring Practices</a></li>
                <li><a href="http://www.w3.org/TR/aria-in-html/" target="_specification">Using ARIA in HTML</a></li>
                <li><a href="https://www.w3.org/TR/core-aam-1.1/" target="_specification">Core Accessibility API Mappings 1.1
                </a></li>
                <li><a href="https://www.w3.org/TR/html-aam-1.0/" target="_specification">HTML Accessibility API Mappings 1.0</a></li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>

  <slide>
    <title>Tabindex and Keyboard Focus</title>
    <contents>
      <ul>
        <li>
            <a
              href="https://www.w3.org/TR/html4/interact/forms.html#adef-tabindex"  target="_specification">
              HTM4 tabindex requirements
            </a>
        </li>
        <li>
            <a
              href="https://www.w3.org/TR/html5/editing.html#focus"  target="_specification">
              HTM5 focus and tabindex requirements
            </a>
        </li>
        <li>Support in <strong>all</strong> modern major browsers</li>
       <li>Visual focus styling should be actively defined to make is easy to find what has focus (e.g. do NOT rely of browser focus styling of focus)</li>
      </ul>

      <h2 id="tabindex_values">Tabindex Values</h2>
      <table class="table table-striped table-hover" aria-label="tabindex_values">
        <thead>
          <tr>
            <th>Value</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>1</td>
            <td>
              <ul>
                <li>Support keyboard focus/blur events.</li>
                <li>Not included in the tab order of the page.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>0</td>
            <td>
              <ul>
                <li>Support keyboard focus/blur events.</li>
                <li>Included in the tab order of the page.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>&gt; 0</td>
            <td>
              <ul>
                <li>Support keyboard focus/blur events.</li>
                <li>Defines the tab order of the page.</li>
                <li><strong>Note:</strong> This technique is not recommended due to browser incompatibilities and unpredicatable focus behaviors.</li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>

  <slide>
    <title>Accessible Name Calculation</title>
    <contents>
        <ul>
          <li><a href="https://www.w3.org/TR/accname-aam-1.1/">W3C Accessible Name and Description: Computation and API Mappings 1.1</a></li>
          <li>In general only <strong>one</strong> technique should be used to define an accessible name, if more than on technique is used the following priortiy is used for the calculation.</li>
        </ul>
        <h2 id="heading_ant">Accessible Name Techniques</h2>
        <table class="table table-striped table-hover" aria-labelledby="heading_ant">
          <thead>
            <tr>
              <th>Priority</th>
              <th>Technique</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td><code>aria-labelledby</code></td>
              <td>
                <ul>
                  <li>The <code>aria-labelledby</code> contains a list of <code>IDREF</code>s to elements on the page.</li>
                  <li>Text content of referenced elements are concatenated to compute the accessible name.</li>
                  <li>Typically references identify visible text on the screen.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>2</td>
              <td><code>aria-label</code></td>
              <td>
                <ul>
                  <li>The <code>aria-label</code> text content defines the accessible name.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>3</td>
              <td>text content</td>
              <td>
                <ul>
                  <li>Some ARIA widget roles allow the text content of the container element to define an accessible name (e.g. <code>role="checkbox"</code>).</li>
                  <li>Text content includes text alternatives, for example <code>alt</code> attribute content of an <code>img</code> element.</li>
                  <li>Text content includes text from generated CSS, for example when the <code>content</code> property is used.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>4</td>
              <td><code>title</code></td>
              <td>
                <ul>
                  <li>If no other source of an accessible name is found and the element has a <code>title</code> attribute, the content of the <code>title</code> attribute will used to define the accessible name.</li>
                </ul>
              </td>
            </tr>
          </tbody>
        </table>
    </contents>
  </slide>

  <slide>
    <title>Accessible Description Calculation</title>
    <contents>
        <ul>
          <li><a href="https://www.w3.org/TR/accname-aam-1.1/">W3C Accessible Name and Description: Computation and API Mappings 1.1</a></li>
          <li>Accessible description information provides more informaiton about a form control, link or aria enabled widget.</li>
          <li>Screen readers each have their own ways of rendering and sometimes ignoring the <em>description information</em> information.</li>
        </ul>
        <h2 id="heading_ant">Accessible Description Techniques</h2>
        <table class="table table-striped table-hover" aria-labelledby="heading_ant">
          <thead>
            <tr>
              <th>Priority</th>
              <th>Technique</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td><code>aria-describedby</code></td>
              <td>
                <ul>
                  <li>The <code>aria-describedby</code> contains a list of <code>IDREF</code>s to elements on the page.</li>
                  <li>Text content of referenced elements are concatenated to compute the <em>accessible description</em>.</li>
                  <li>Typically references identify visible text on the screen.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>2</td>
              <td><code>title</code></td>
              <td>
                <ul>
                  <li>If no other source of an <em>accessible description</em> is found and the element has a <code>title</code> attribute that is <strong>not</strong> being used to define an accessible name, the content of the <code>title</code> attribute is used to define the <em>accessible description</em>.</li>
                </ul>
              </td>
            </tr>
          </tbody>
        </table>
    </contents>
  </slide>

  <slide>
    <title>Example Widget: ARIA Checkbox</title>
    <style id="style">
      fieldset {
        border-color: #EEE;
        width: 10em;
      }

      fieldset legend {
        font-size: 100%;
      }

      label {
        display: block;
        margin-bottom: 0.25em;
      }

      label input {
        margin-right: 0.5em;
      }

      div[role="checkbox"] {
        margin-bottom: 0.25em;
        margin-left: 0.25em;
      }

      div[role="checkbox"] span {
        margin-right: 0.25em;
      }

      div[role="checkbox"][aria-checked="true"] span {
        margin-right: 0.135em;
      }

      div[role="checkbox"] span:before {
        content: '✗';
        color: red;
      }

      div[role="checkbox"][aria-checked="true"] span:before {
        content: '✓';
        color: green;
        font-size: 90%;
      }

      label,
      [role="checkbox"] {
        border: thin solid transparent;
        width: 10em;
      }


      label.focus,
      [role="checkbox"]:focus {
        border-color: #999;
        background-color: #DDE;
      }

      label:hover,
      [role="checkbox"]:hover {
        background-color: #CCD;
      }
    </style>
    <contents>


      <script id="script" type="text/javascript">
        function toggleCheckbox(node) {
          if (node.getAttribute('aria-checked') === 'true') {
            node.setAttribute('aria-checked', 'false');
          }
          else {
            node.setAttribute('aria-checked', 'true');
          }
        }

        function keydownCheckbox(event) {
          var cb = event.currentTarget;
          if (event.keyCode === 32) {
            toggleCheckbox(cb);

            event.stopPropagation();
            event.preventDefault();
          }
        }

        function clickCheckbox(event) {
          var cb = event.currentTarget;
          toggleCheckbox(cb);
          event.stopPropagation();
          event.preventDefault();
        }

        function checkboxFocus(event) {
          event.currentTarget.parentNode.classList.add('focus');
        }

        function checkboxBlur(event) {
          event.currentTarget.parentNode.classList.remove('focus');
        }
      </script>

     <h2>Features</h2>
     <ul>
       <li>Responds to mouse events using <code>onClick</code> event.</li>
       <li>Responds to <kbd>space</kbd> keyboard event using <code>onKeyDown</code> event.</li>
       <li><code>tabindex=0</code> makes widget keyboard focusable and include in tab order of page.</li>
       <li><code>role="checkbox"</code> identifies widget to assistive technologies as a "checkbox".</li>
       <li><code>aria-checked</code> attribute identifies the state as being "checked" or "unchecked".</li>
       <li>Accessible name comes from child text content of the <code>div[role="checkbox"]</code> element.</li>
       <li><code>aria-hidden</code> attribute hides the characters used for indicating state (i.e. <span style="color: red">✗</span> and <span style="color: green">✓</span>) from being included in the accessible name calculation.</li>
       <li>CSS attribute selectors are used to keep the visual indication of checked state snychronized with accessibility API.</li>
       <li><code>onFocus</code> and <code>onBlur</code> event handlers are used on standard checkboxes to provide visual indication of keyboard focus.</li>
     </ul>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/pages/user/jongund/aria-checkbox-complete/" target="_webedit">Checkbox example on WebEdit</a></p>

     <div id="example">
      <fieldset>
        <legend>
        Pizza Toppings
        </legend>

        <label>
          <input type="checkbox"
                 onfocus="checkboxFocus(event)"
                 onBlur="checkboxBlur(event)"/>

          Green pepper
        </label>

        <label>
          <input type="checkbox"
                 onfocus="checkboxFocus(event)"
                 onBlur="checkboxBlur(event)"/>
          Onion
        </label>

        <div role="checkbox"
             tabindex="0"
             aria-checked="false"
             onkeydown="keydownCheckbox(event)"
             onclick="clickCheckbox(event)">
          <span aria-hidden="true"></span>
          Mushrooms
        </div>

      <div role="checkbox"
           tabindex="0"
           aria-checked="false"
           onkeydown="keydownCheckbox(event)"
           onclick="clickCheckbox(event)">
          <span aria-hidden="true"></span>
          Spinach
        </div>

      </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
   </contents>
  </slide>

 <slide>

      <title>Basic Screen Reader Commands</title>
      <contents>
        <table class="table table-striped table-hover" aria-label="Basic Screen Reader Commands">
          <thead>
            <tr>
              <th>Action</th>
              <th>JAWS (Windows)</th>
              <th>NVDA (Windows)</th>
              <th>Voice Over (OS X)</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Next link, form control or widget</td>
              <td>Tab</td>
              <td>Tab</td>
              <td>Tab</td>
            </tr>
            <tr>
              <td>Previous link, form control or widget</td>
              <td>Shift+Tab</td>
              <td>Shift+Tab</td>
              <td>Shift+Tab</td>
            </tr>
            <tr>
              <td>Re-read current item</td>
              <td>Insert+Numpad 5</td>
              <td>NVDA+Numpad 5 or NVDA+Shift+O</td>
              <td>Command+Option+Space</td>
            </tr>
            <tr>
              <td>More information on item</td>
              <td>Insert+SHIFT+F1 and Insert+Control+Shift+F1</td>
              <td>NVDA+D</td>
              <td>Control+Option+F4</td>
            </tr>
            <tr>
              <td>List of Links</td>
              <td>Insert+F7</td>
              <td>NVDA+F7</td>
              <td>Command+Option+U, then left/right arrow to list of links</td>
            </tr>
            <tr>
              <td>Detailed Keyboard Information</td>
              <td><a href="http://doccenter.freedomscientific.com/doccenter/archives/training/jawskeystrokes.htm">JAWS Keyboard Documentation</a></td>
              <td><a href="http://www.nvaccess.org/files/nvda/documentation/userGuide.html">NVDA Documentation</a></td>
              <td><a href="https://www.apple.com/voiceover/info/guide/">Voice Over Guide</a></td>
            </tr>
          </tbody>
        </table>
      </contents>
    </slide>

  <slide>
    <title>Part 1 Responding to the keyboard</title>
    <style id="style">
      fieldset {
        border-color: #EEE;
        width: 10em;
      }

      fieldset legend {
        font-size: 100%;
      }

      label {
        display: block;
        margin-bottom: 0.25em;
      }

      label input {
        margin-right: 0.5em;
      }

      div[role="checkbox"] {
        margin-bottom: 0.25em;
        margin-left: 0.25em;
      }

      div[role="checkbox"] span {
        margin-right: 0.25em;
      }
    </style>
    <contents>
      <ul>
        <li>Adding <code>tabindex="0"</code> to make part of tab order of the page.</li>
        <li>Add <code>onKeyDown</code> event handler to toggle checkbox when <kbd>space</kbd> key is pressed.</li>
      </ul>

      <script id="script" type="text/javascript">
        function toggleCheckbox(node) {
          var n = node.firstElementChild;
          if (n.innerHTML.indexOf('✗') &gt;= 0) {
            n.innerHTML = '✓';
            n.style.color = 'green';
            n.style.paddingRight = '0px';
          }
          else {
            n.innerHTML = '✗';
            n.style.color = 'red';
            n.style.paddingRight = '0.22em';
          }
        }

        function keydownCheckbox(event) {
          var cb = event.currentTarget;
          if (event.keyCode === 32) {
            toggleCheckbox(cb);

            event.stopPropagation();
            event.preventDefault();
          }
        }

        function clickCheckbox(event) {
          var cb = event.currentTarget;
          toggleCheckbox(cb);

          event.stopPropagation();
          event.preventDefault();
        }

      </script>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/aria-checkbox-part-1/copy/" target="_webedit">Part 1 on WebEdit</a></p>

     <div id="example">
      <fieldset>
        <legend>
        Pizza Toppings
        </legend>

        <label>
          <input type="checkbox"/>

          Green pepper
        </label>

        <label>
          <input type="checkbox"/>
          Onion
        </label>

        <div tabindex="0"
             onkeydown="keydownCheckbox(event)"
             onclick="clickCheckbox(event)">
          <span style="color: red; padding-right: 0.22em;">✗</span>
          Mushrooms
        </div>

      <div tabindex="0"
           onkeydown="keydownCheckbox(event)"
           onclick="clickCheckbox(event)">
          <span style="color: red; padding-right: 0.22em;">✗</span>
          Spinach
        </div>

      </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>

    </contents>
  </slide>

  <slide>
    <title>Part 2: Adding role, checked state and accessible name</title>
    <style id="style">
      fieldset {
        border-color: #EEE;
        width: 10em;
      }

      fieldset legend {
        font-size: 100%;
      }

      label {
        display: block;
        margin-bottom: 0.25em;
      }

      label input {
        margin-right: 0.5em;
      }

      div[role="checkbox"] {
        margin-bottom: 0.25em;
        margin-left: 0.25em;
      }

      div[role="checkbox"] span {
        margin-right: 0.25em;
      }
    </style>
    <contents>
      <ul>
        <li>Adding <code>role="checkbox"</code> to make part of tab order of the page.</li>
        <li>Adding <code>aria-checked</code> attribute.</li>
        <li>Accessible name from text content.</li>
        <li>Removing state character (e.g. <span style="color: red">✗</span>) from accessible name using <code>aria-hidden</code>.</li>
      </ul>

      <script id="script" type="text/javascript">
        function toggleCheckbox(node) {
          var n = node.firstElementChild;
          if (n.innerHTML.indexOf('✗') &gt;= 0) {
            n.innerHTML = '✓';
            n.style.color = 'green';
            n.style.paddingRight = '0px';
            n.setAttribute('aria-checked', 'true');
          }
          else {
            n.innerHTML = '✗';
            n.style.color = 'red';
            n.style.paddingRight = '0.22em';
            n.setAttribute('aria-checked', 'false');
          }
        }

        function keydownCheckbox(event) {
          var cb = event.currentTarget;
          if (event.keyCode === 32) {
            toggleCheckbox(cb);

            event.stopPropagation();
            event.preventDefault();
          }
        }

        function clickCheckbox(event) {
          var cb = event.currentTarget;
          toggleCheckbox(cb);

          event.stopPropagation();
          event.preventDefault();
        }

      </script>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/aria-checkbox-part-2/copy/" target="_webedit">Part 2 on WebEdit</a></p>

     <div id="example">
      <fieldset>
        <legend>
        Pizza Toppings
        </legend>

        <label>
          <input type="checkbox"/>

          Green pepper
        </label>

        <label>
          <input type="checkbox"/>
          Onion
        </label>

        <div role="checkbox"
             tabindex="0"
             aria-checked="false"
             onkeydown="keydownCheckbox(event)"
             onclick="clickCheckbox(event)">
          <span aria-hidden="true"
                style="color: red; padding-right: 0.22em;">
            ✗
          </span>
          Mushrooms
        </div>

      <div role="checkbox"
           tabindex="0"
           aria-checked="false"
           onkeydown="keydownCheckbox(event)"
           onclick="clickCheckbox(event)">
          <span aria-hidden="true"
                style="color: red; padding-right: 0.22em;">
            ✗
          </span>
          Spinach
        </div>

      </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>

    </contents>
  </slide>

 <slide>
    <title>Part 3: Focus and hover styling</title>
    <style id="style">
      fieldset {
        border-color: #EEE;
        width: 10em;
      }

      fieldset legend {
        font-size: 100%;
      }

      label {
        display: block;
        margin-bottom: 0.25em;
      }

      label input {
        margin-right: 0.5em;
      }

      div[role="checkbox"] {
        margin-bottom: 0.25em;
        margin-left: 0.25em;
      }

      div[role="checkbox"] span {
        margin-right: 0.25em;
      }

      label,
      [role="checkbox"] {
        border: thin solid transparent;
        width: 10em;
      }


      label.focus,
      [role="checkbox"]:focus {
        border-color: #999;
        background-color: #DDE;
      }

      label:hover,
      [role="checkbox"]:hover {
        background-color: #CCD;
      }
    </style>
    <contents>
      <ul>
        <li><code>hover</code> and <code>focus</code> styling the similar to harmonize look and feel of styling between interaction techniques.</li>
        <li>Recommend <code>focus</code> styling has a border and <code>hover</code> does not.</li>
        <li><code>focus</code> styling used a 1px <code>border</code> or <code>outline</code> width to make the control with focus salient to users.</li>
        <li>Need to use <code>onfocus</code> and <code>onblur</code> events to create focus styling of radio buttons and checkboxes with their labels.</li>
        <li>Styling background color also makes the change in focus much easier to detect visually.</li>
      </ul>

      <script id="script" type="text/javascript">
        function toggleCheckbox(node) {
          var n = node.firstElementChild;
          if (n.innerHTML.indexOf('✗') &gt;= 0) {
            n.innerHTML = '✓';
            n.style.color = 'green';
            n.style.paddingRight = '0px';
            n.setAttribute('aria-checked', 'true');
          }
          else {
            n.innerHTML = '✗';
            n.style.color = 'red';
            n.style.paddingRight = '0.22em';
            n.setAttribute('aria-checked', 'false');
          }
        }

        function keydownCheckbox(event) {
          var cb = event.currentTarget;
          if (event.keyCode === 32) {
            toggleCheckbox(cb);

            event.stopPropagation();
            event.preventDefault();
          }
        }

        function clickCheckbox(event) {
          var cb = event.currentTarget;
          toggleCheckbox(cb);

          event.stopPropagation();
          event.preventDefault();
        }

        function checkboxFocus(event) {
          event.currentTarget.parentNode.classList.add('focus');
        }

        function checkboxBlur(event) {
          event.currentTarget.parentNode.classList.remove('focus');
        }
      </script>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/aria-checkbox-part-3/copy/" target="_webedit">Part 3 on WebEdit</a></p>

     <div id="example">
      <fieldset>
        <legend>
        Pizza Toppings
        </legend>

        <label>
          <input type="checkbox"
             onfocus="checkboxFocus(event)"
             onblur="checkboxBlur(event)"/>
          Green pepper
        </label>

        <label>
          <input type="checkbox"
             onfocus="checkboxFocus(event)"
             onblur="checkboxBlur(event)"/>
          Onion
        </label>

        <div role="checkbox"
             tabindex="0"
             aria-checked="false"
             onkeydown="keydownCheckbox(event)"
             onclick="clickCheckbox(event)">
          <span aria-hidden="true" style="color: red; padding-right: 0.22em;">✗</span>
          Mushrooms
        </div>

      <div role="checkbox"
           tabindex="0"
           aria-checked="false"
           onkeydown="keydownCheckbox(event)"
           onclick="clickCheckbox(event)">
          <span aria-hidden="true" style="color: red; padding-right: 0.22em;">✗</span>
          Spinach
        </div>

      </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
  </slide>

 <slide>
    <title>Part 4: Synchronization of ARIA and visual states</title>
    <style id="style">
      fieldset {
        border-color: #EEE;
        width: 10em;
      }

      fieldset legend {
        font-size: 100%;
      }

      label {
        display: block;
        margin-bottom: 0.25em;
      }

      label input {
        margin-right: 0.5em;
      }

      div[role="checkbox"] {
        margin-bottom: 0.25em;
        margin-left: 0.25em;
      }

      div[role="checkbox"] span {
        margin-right: 0.25em;
      }

      div[role="checkbox"][aria-checked="true"] span {
        margin-right: 0.135em;
      }

      div[role="checkbox"] span:before {
        content: '✗';
        color: red;
      }

      div[role="checkbox"][aria-checked="true"] span:before {
        content: '✓';
        color: green;
        font-size: 90%;
      }

      label,
      [role="checkbox"] {
        border: thin solid transparent;
        width: 10em;
      }


      label.focus,
      [role="checkbox"]:focus {
        border-color: #999;
        background-color: #DDE;
      }

      label:hover,
      [role="checkbox"]:hover {
        background-color: #CCD;
      }
    </style>
    <contents>
      <ul>
        <li>Using CSS attribute selectors and CSS <code>content</code> property to synchronize visual and aria states.</li>
        <li>Use of CSS <code>content</code> property supports high contrast browser settings, unike the use of CSS <code>background-image</code>.</li>
      </ul>

      <script id="script" type="text/javascript">
        function toggleCheckbox(node) {
          if (node.getAttribute('aria-checked') !== 'true') {
            node.setAttribute('aria-checked', 'true');
          }
          else {
            node.setAttribute('aria-checked', 'false');
          }
        }

        function keydownCheckbox(event) {
          var cb = event.currentTarget;
          if (event.keyCode === 32) {
            toggleCheckbox(cb);

            event.stopPropagation();
            event.preventDefault();
          }
        }

        function clickCheckbox(event) {
          var cb = event.currentTarget;
          toggleCheckbox(cb);

          event.stopPropagation();
          event.preventDefault();
        }

        function checkboxFocus(event) {
          event.currentTarget.parentNode.classList.add('focus');
        }

        function checkboxBlur(event) {
          event.currentTarget.parentNode.classList.remove('focus');
        }

      </script>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/aria-checkbox-part-4/copy/" target="_webedit">Part 4 on WebEdit</a></p>

     <div id="example">
      <fieldset>
        <legend>
        Pizza Toppings
        </legend>

        <label>
          <input type="checkbox"
             onfocus="checkboxFocus(event)"
             onblur="checkboxBlur(event)"/>
          Green pepper
        </label>

        <label>
          <input type="checkbox"
             onfocus="checkboxFocus(event)"
             onblur="checkboxBlur(event)"/>
          Onion
        </label>

        <div role="checkbox"
             tabindex="0"
             aria-checked="false"
             onkeydown="keydownCheckbox(event)"
             onclick="clickCheckbox(event)">
          <span aria-hidden="true"> </span>
          Mushrooms
        </div>

      <div role="checkbox"
           tabindex="0"
           aria-checked="false"
           onkeydown="keydownCheckbox(event)"
           onclick="clickCheckbox(event)">
          <span aria-hidden="true"> </span>
          Spinach
        </div>

      </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
  </slide>


  <slide>
    <title>Using ARIA in HTML (Best Practices)</title>
    <contents>
      <p><a href="https://w3c.github.io/using-aria/">Using ARIA in HTML (Best Practices)</a></p>
      <ul>
        <li>Use native semantics of HTML (e.g. <code>input[type=checkbox]</code> rather than div[role=checkbox]).</li>
        <li>Don't override native semantics of elements (e.g. <code>h2[role="banner]</code>).</li>
        <li>Don't define the native semantics of an element (e.g <code>main[role=main]</code>).</li>
        <li>All interactive ARIA controls must be usable with the keyboard.</li>
        <li>Do not use role="presentation" or aria-hidden="true" on a visible focusable element.</li>
        <li>All interactive elements must have an accessible name.</li>
        <li>Live regions (e.g. <code>aria-live</code> attribute and <code>log</code>, <code>status</code>, and <code>alert</code> roles) should be used with extreme caution, only for ansynchrounous content changes important for the users attention.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Design Pattern: Disclosure (Hide/Show)</title>
    <contents>

    <ul>
      <li><a href="http://www.parking.illinois.edu/about-us/faqs" target="_example">Illinois Parking FAQ (Not Accessible)</a></li>
      <li><a href="https://www.w3.org/TR/wai-aria-practices/#disclosure" target="_example">ARIA Design Pattern for Disclosures (Show/Hide)</a>
        <ul>
          <li><a href="https://www.w3.org/TR/wai-aria-practices/examples/disclosure/disclosure-faq.html" target="_example"><abbr title="ARIA Authoring Practices">APG</abbr> Example 1: Answers to Frequently Asked Questions</a></li>
          <li><a href="https://www.w3.org/TR/wai-aria-practices/examples/disclosure/disclosure-img-long-description.html" target="_example"><abbr title="ARIA Authoring Practices">APG</abbr> Example 2: Image Description</a></li>
        </ul>
      </li>
    </ul>

    <iframe src="https://www.w3.org/TR/wai-aria-practices/#disclosure"
            title="ARIA Disclosure Example"
            width="98%"
            height="600px"/>

    </contents>
  </slide>

 <slide>
    <title>Typical Inaccessible Disclosure FAQ</title>
    <style id="style">
        .faq h3 {
            margin: 0;
            padding: 0;
            margin-top: 1em;
            font-weight: bold;
            font-size: 110%;
            border: thin solid transparent;
            background-color: transparent;
            padding-left: 0.125em;
        }


        .faq .desc {
            margin: 0;
            padding: 0.5em;
            font-size: 110%;
            display: none;
            background-color: #FFFEDB;
        }

        .faq h3:hover {
          background-color: #eee;
        }

        .faq h3:focus {
          border-color: #663300;
        }

        .faq h3:active {
          background-color: #bbb;
        }

        .faq h3:before {
          content: url('http://w3c.github.io/aria-practices/examples/disclosure/images/right-arrow-brown.png');
          padding-right: 0.35em;
        }

        .faq h3.expanded:before {
          content: url('http://w3c.github.io/aria-practices/examples/disclosure/images/down-arrow-brown.png');
          padding-right: 0.35em;
        }
    </style>
    <contents>
      <ul>
        <li>Headings are not really appropriate for identifying an interactive element.</li>
        <li>Only the mouse can be used to hide and show the description asociated with each FAQ.</li>
        <li>No information on the heading being an interactive element.</li>
      </ul>

      <script id="script" type="text/javascript">
        function toggleDescription(event, id) {
          var target = event.currentTarget;
          var desc   = document.getElementById(id);

          if (target.classList.toggle('expanded')) {
              desc.style.display = 'block';
          }
          else {
              desc.style.display = 'none';
          }
        };
      </script>

     <h2>Example</h2>

     <p><a id="id_disclosure_inaccessible" href="https://webedit.disability.illinois.edu/user/jongund/aria-disclosure-not-accessible/output/" target="_webedit">Inaccessible disclosure on WebEdit</a> (<a href="https://webedit.disability.illinois.edu/user/jongund/aria-disclosure-not-accessible/copy/" aria-describedby="id_disclosure_inaccessible">Copy to Webedit</a>)</p>

     <div id="example">
        <div class="faq">
          <h3 onclick="toggleDescription(event,'faq1_desc')">
            What do I do if I have a permit for an assigned lot, but can't find a space there?
          </h3>
          <p id="faq1_desc" class="desc">

                Park at the nearest available parking meter without paying the meter
                and call 999-999-9999 to report the problem. We will note and approve your alternate
                location and will investigate the cause of the shortage in your assigned facility.

          </p>

          <h3 onclick="toggleDescription(event,'faq2_desc')">
            What do I do if I lose my permit or if my permit is stolen?
          </h3>
          <p id="faq2_desc" class="desc">
            You should come to the Parking office and report the
                loss. There is a fee to replace your lost permit. However, if your permit was stolen, a
                copy of a police report needs to be submitted along with a stolen parking permit form for
                a fee replacement exemption.

          </p>

          <h3 onclick="toggleDescription(event,'faq3_desc')">
            Is there free parking on holidays?
          </h3>
          <p id="faq3_desc" class="desc">

                All facilities are restricted from 2:00 am - 6:00 am on all days. No
                exceptions are made for any holiday or recess except those officially listed as a

            <q>
              Holidays
            </q>
             in the calendar. Please note: 24-hour rental spaces, 24-hour rental lots, and
                disabled parking is enforced at all times.

          </p>

          <h3 onclick="toggleDescription(event,'faq4_desc')">
            Do all parking facilities have the same enforcement rules?
          </h3>
          <p id="faq4_desc" class="desc">

                Some parking facility restrictions differ from others. Be sure to
                take note of the signs at each lot entrance.

          </p>
        </div>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
  </slide>

  <slide>
    <title>Accessible Disclosure FAQ</title>
    <style id="style">
      dl.faq button {
          margin: 0;
          padding: 0;
          margin-top: 1em;
          font-weight: bold;
          font-size: 110%;
          border: thin solid transparent;
          background-color: transparent;
          padding-left: 0.125em;
      }

      dl dd {
        margin: 0;
        padding: 0;
        margin-left: 1.5em;
      }

      dl.faq .desc {
          margin: 0;
          padding: 0.5em;
          font-size: 110%;
          display: none;
          background-color: #FFFEDB;
      }

      dl.faq button:hover,
      dl.faq button:focus {
        background-color: #eee;
      }

      dl.faq button:focus {
        border-color: #663300;
      }

      dl.faq button:active {
        background-color: #bbb;
      }

      dl.faq button[aria-expanded="false"]:before {
        content: url('http://w3c.github.io/aria-practices/examples/disclosure/images/right-arrow-brown.png');
        padding-right: 0.35em;

      }

      dl.faq button[aria-expanded="true"]:before {
        content: url('http://w3c.github.io/aria-practices/examples/disclosure/images/down-arrow-brown.png');
        padding-right: 0.35em;
      }
    </style>
    <contents>
      <ul>
        <li>The use of <code>dl</code>, <code>dt</code> and <code>dd</code> elementsto identify the semantic structure of the FAQs as a list of items with titles and descriptions.</li>
        <li><code>button</code> element used to hide and show description content for each FAQ.</li>
        <li><code>aria-expanded</code> attribute on the title to indicate the state of the disclosure of the corresponding FAQ description.</li>
        <li><code>aria-controls</code> attribute to identify the content controlled by the button.</li>
        <li>Use of CSS <code>:before</code> to synchronize visual state with aria states.</li>
      </ul>

      <script id="script" type="text/javascript">
        var ButtonExpand = function (domNode) {

          this.domNode = domNode;

          this.keyCode = Object.freeze({
            'RETURN': 13
          });
        };

        ButtonExpand.prototype.init = function () {

          this.controlledNode = false;

          var id = this.domNode.getAttribute('aria-controls');

          if (id) {
            this.controlledNode = document.getElementById(id);
          }

          this.domNode.setAttribute('aria-expanded', 'false');
          this.hideContent();

          this.domNode.addEventListener('keydown',    this.handleKeydown.bind(this));
          this.domNode.addEventListener('click',      this.handleClick.bind(this));
          this.domNode.addEventListener('focus',      this.handleFocus.bind(this));
          this.domNode.addEventListener('blur',       this.handleBlur.bind(this));

        };

        ButtonExpand.prototype.showContent = function () {

          if (this.controlledNode) {
            this.controlledNode.style.display = 'block';
          }

        };

        ButtonExpand.prototype.hideContent = function () {

          if (this.controlledNode) {
            this.controlledNode.style.display = 'none';
          }

        };

        ButtonExpand.prototype.toggleExpand = function () {

          if (this.domNode.getAttribute('aria-expanded') === 'true') {
            this.domNode.setAttribute('aria-expanded', 'false');
            this.hideContent();
          }
          else {
            this.domNode.setAttribute('aria-expanded', 'true');
            this.showContent();
          }

        };

        /* EVENT HANDLERS */

        ButtonExpand.prototype.handleKeydown = function (event) {

          console.log('[keydown]');

          switch (event.keyCode) {

            case this.keyCode.RETURN:

              this.toggleExpand();

              event.stopPropagation();
              event.preventDefault();
              break;

            default:
              break;
          }

        };

        ButtonExpand.prototype.handleClick = function (event) {
          this.toggleExpand();
        };

        ButtonExpand.prototype.handleFocus = function (event) {
          this.domNode.classList.add('focus');
        };

        ButtonExpand.prototype.handleBlur = function (event) {
          this.domNode.classList.remove('focus');
        };

        /* Initialize Hide/Show Buttons */

        window.addEventListener('load', function (event) {

          var buttons =  document.querySelectorAll('button[aria-expanded][aria-controls]');

          for (var i = 0; i &lt; buttons.length; i++) {
            var be = new ButtonExpand(buttons[i]);
            be.init();
          }

        }, false);
      </script>

     <h2>Example</h2>

     <p>
      <a id="id_disclosure_2" href="https://webedit.disability.illinois.edu/user/jongund/aria-disclosure-list/output/" target="_webedit">
        Accessible FAQ on WebEdit
      </a>
      (<a href="https://webedit.disability.illinois.edu/user/jongund/aria-disclosure-list/copy/" aria-describedby="id_disclosure_2">Copy to WebEdit</a>)
     </p>

     <div id="example">
        <dl class="faq">
            <dt>
              <button aria-expanded="false" aria-controls="faq1_desc">
                What do I do if I have a permit for an assigned lot, but can't find a space there?
              </button>
            </dt>
            <dd>
              <p id="faq1_desc" class="desc">

                    Park at the nearest available parking meter without paying the meter
                    and call 999-999-9999 to report the problem. We will note and approve your alternate
                    location and will investigate the cause of the shortage in your assigned facility.

              </p>
            </dd>
            <dt>
              <button aria-expanded="false" aria-controls="faq2_desc">
                What do I do if I lose my permit or if my permit is stolen?
              </button>
            </dt>
            <dd>
              <p id="faq2_desc" class="desc">
                You should come to the Parking office and report the
                    loss. There is a fee to replace your lost permit. However, if your permit was stolen, a
                    copy of a police report needs to be submitted along with a stolen parking permit form for
                    a fee replacement exemption.

              </p>
            </dd>
            <dt>
              <button aria-expanded="false" aria-controls="faq3_desc">
                Is there free parking on holidays?
              </button>
            </dt>
            <dd>
              <p id="faq3_desc" class="desc">

                    All facilities are restricted from 2:00 am - 6:00 am on all days. No
                    exceptions are made for any holiday or recess except those officially listed as a

                <q>
                  Holidays
                </q>
                 in the calendar. Please note: 24-hour rental spaces, 24-hour rental lots, and
                    disabled parking is enforced at all times.

              </p>
            </dd>
            <dt>
              <button aria-expanded="false" aria-controls="faq4_desc">
                Do all parking facilities have the same enforcement rules?
              </button>
            </dt>
            <dd>
              <p id="faq4_desc" class="desc">

                    Some parking facility restrictions differ from others. Be sure to
                    take note of the signs at each lot entrance.

              </p>
            </dd>
          </dl>
       </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
  </slide>


  <slide>
    <title>Design Pattern: Menu Button</title>
    <contents>
    <ul>
      <li><a href="https://www.w3.org/TR/wai-aria-practices/#menubutton" target="_specification">ARIA Authoring Practices: Menu Button</a></li>
      <li><a href="https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-actions.html">Example 1: Action Menu</a></li>
      <li><a href="https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-links.html">Example 2: Navigation Menu</a></li>
      <li><a href="https://www.w3.org/TR/wai-aria-practices/examples/menu-button//menu-button-actions-active-descendant.html">Example 3: Action Menu (<code>aria-activedescendant</code>)</a></li>
    </ul>
    <iframe src="https://www.w3.org/TR/wai-aria-practices/#menubutton"
            title="ARIA Menubutton Example"
            width="98%"
            height="600px"/>
    </contents>
  </slide>

  <slide>
    <title>Design Pattern: Navigation Menu Options</title>
    <contents>
       <table class="table table-striped table-hover" aria-label="Basic Screen Reader Commands">
          <thead>
            <tr>
              <th>Technique</th>
              <th>Keyboard Interaction</th>
              <th>ARIA</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>Keyboard Enhancement</th>
              <td>
                <ul>
                  <li><kbd>tab</kbd></li>
                  <li><kbd>left arrow</kbd></li>
                  <li><kbd>right arrow</kbd></li>
                  <li><kbd>up arrow</kbd></li>
                  <li><kbd>down arrow</kbd></li>
                </ul>
              </td>
              <td>
                <a href="https://www.w3.org/TR/wai-aria-practices-1.1/#aria_lh_navigation" target="_specification"><code>navigation</code> landmark</a>
              </td>
              <td>
                <ul>
                  <li>Primarily <kbd>tab</kbd> key navigation.</li>
                  <li>Cursor keys provide enhanced navigation.</li>
                  <li>Uses hierarchical lists of links.</li>
                  <li>Uses ARIA <code>navigation</code> landmarks.</li>
                  <li>Examples:
                    <ul>
                      <li><a href="http://www.dhs.state.il.us" target="_example">Illinois Department of Human Services</a></li>
                      <li><a href="http://illinois.edu/" target="_example">University of Illinois Home Page</a></li>
                      <li><a href="https://adobe-accessibility.github.io/Accessible-Mega-Menu/" target="_example">Adobe Mega Menu</a></li>
                    </ul>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <th>Menu Button</th>
              <td>
                <ul>
                  <li><kbd>tab</kbd></li>
                  <li><kbd>up arrow</kbd></li>
                  <li><kbd>down arrow</kbd></li>
                </ul>
              </td>
              <td>
                <a href="http://w3c.github.io/aria-practices/#menubutton" target="_specification">Menu Button Design Pattern</a>
              </td>
              <td>
                <ul>
                  <li><kbd>tab</kbd> moves into and out of each menu button.</li>
                  <li><kbd>up arrow</kbd> and <kbd>down arrow</kbd> move between pull down menu items.</li>
                  <li>Uses <code>button</code>, <code>menu</code> and <code>menuitem</code>  widget roles.</li>
                  <li>Examples:
                    <ul>
                      <li><a href="http://fae.disability.illinois.edu" target="_example">Functional Accessibility Evaluator 2.0</a></li>
                      <li><a href="http://citl.illinois.edu/" target="_example">Illinois Center for Innovation in Teaching &amp; Learning</a></li>
                    </ul>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <th>Disclosure</th>
              <td>
                <ul>
                  <li><kbd>tab</kbd></li>
                  <li><kbd>space/enter</kbd></li>
                </ul>
              </td>
              <td>
                <a href="http://w3c.github.io/aria-practices/#disclosure" target="_specification">Disclosure Design Pattern</a>
              </td>
              <td>
                <ul>
                  <li><kbd>tab</kbd> moves into and out menubar.</li>
                  <li><kbd>space</kbd> or <kbd>return</kbd> opens panel of links.</li>
                  <li><kbd>tab</kbd> and cursor keys move focus between disclosed links.</li>
                  <li>Examples:
                    <ul>
                      <li><a href="http://admissions.illinois.edu" target="_example">Illinois Admissions</a></li>
                      <li><a href="http://education.illinois.edu/" target="_example">Illinois College of Education</a></li>
                    </ul>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <th>Menubar</th>
              <td>
                <ul>
                  <li><kbd>tab</kbd></li>
                  <li><kbd>left arrow</kbd></li>
                  <li><kbd>right arrow</kbd></li>
                  <li><kbd>up arrow</kbd></li>
                  <li><kbd>down arrow</kbd></li>
                </ul>
              </td>
              <td>
                <a href="http://w3c.github.io/aria-practices/#menubar" target="_specification">Menubar Design Pattern</a>
              </td>
              <td>
                <ul>
                  <li><kbd>tab</kbd> moves into and out of each disclosure button.</li>
                  <li>Cursor keys move between pull down menus and menuitems.dri</li>
                  <li>Examples:
                    <ul>
                      <li><a href="http://w3c.github.io/aria-practices/examples/menubar/menubar-1/menubar-1.html" target="_example">ARIA Authoring Practices Example</a></li>
                    </ul>
                  </li>
                </ul>
              </td>
            </tr>
          </tbody>
        </table>
    </contents>
  </slide>

 <slide>
    <title>Design Example: Drop Down Navigation Links</title>
    <contents>
      <ul>
        <li>Keyboard interaction dictates the ARIA roles</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Drop Down Navigation Links: Tab Key Operation</title>
    <style>

ul.example {
  margin: 10px;
  padding: 10px;
  font-size: 110%;
  list-style: none;
  background-color: #EEEEEE;
  height: 2.5em;
}

.popup {
  display: block;
  float: left;
  position: relative;
}

nav > ul > li > a {
  font-size: 110%;
  padding: 0.25em;
  width: 8em;
  text-decoration: none;
  color: black;
  border: 2px solid transparent;
}

nav > ul > li > a:after {
  content: url('images/down-arrow-brown.png');
  padding-left: .25em;
}

nav > ul > li > ul {
  margin: 0;
  padding: 0;
  position: absolute;
  top: 1.75em;
  font-size: 110%;
  list-style: none;
  background-color: #ccddff;
  left: -3000em;
}

nav > ul > li > ul > li {
  margin: 0;
  padding: 0;
}

nav > ul > li > ul > li > a,
nav > ul > li > ul > li > a:visited {
  display: block;
  text-decoration: none;
  padding: 0.25em;
  padding-left: 0.5em;
  padding-right: 0.5em;
  background-color: #ccddff;
  width: 10em;
  color: black;
}

/* focus and hover styling */

nav > ul > li > a:hover {
  background-color: #ccddff;
}

nav > ul > li > a:focus {
  border-color: black;
  background-color: #ccddff;
}

nav > ul > li > ul > li > a:focus {
  outline: 2px solid black;
  background-color: #ccddff;
}

    </style>
    <contents>

    <ul>
      <li><kbd>tab</kbd> key provides navigation to all links in the navigation menu.</li>
      <li>Links in the popup lists of links become visible when they receive focus.</li>
      <li>Most basic and predictable keyboard model.</li>
    </ul>

     <div id="example">
        <nav aria-label="primary">
          <ul class="example">
            <li class="popup">
              <a href="#">About</a>
              <ul>
                <li>
                  <a href="#overview">Overview</a>
                </li>
                <li>
                  <a href="#admin">Administration</a>
                </li>
                <li >
                  <a href="#facts">Facts</a>
                </li>
                <li>
                  <a href="#tours" >Campus Tours</a>
                </li>
              </ul>
            </li>
            <li class="popup">
              <a href="#">Admissions</a>
              <ul>
                <li>
                  <a href="#apply">Apply</a>
                </li>
                <li>
                  <a href="#tuition">Tuition</a>
                </li>
                <li >
                  <a href="#signup">Sign Up</a>
                </li>
                <li role="separator"></li>
                <li>
                  <a href="#visit">Visit</a>
                </li>
                <li>
                  <a href="#photo">Photo Tour</a>
                </li>
                <li>
                  <a href="#connect">Connect</a>
                </li>
              </ul>
            </li>
            <li class="popup">
              <a href="#">Academics</a>
              <ul>
                <li>
                  <a href="#colleges">Colleges &amp; Schools</a>
                </li>
                <li>
                  <a href="#programs">Programs of Study</a>
                </li>
                <li>
                  <a href="#honors">Honors Programs</a>
                </li>
                <li>
                  <a href="#online">Online Courses</a>
                </li>
                <li role="separator"></li>
                <li>
                  <a href="#explorer">Course Explorer</a>
                </li>
                <li>
                  <a href="#register">Register for Class</a>
                </li>
                <li>
                  <a href="#academic">Academic Calendar</a>
                </li>
                <li>
                  <a href="#tanscripts">Transcripts</a>
                </li>
              </ul>
            </li>
          </ul>
        </nav>
      </div>

      <script>

        var i, l;

        var topLinks = document.querySelectorAll('nav > ul > li > a');

        for (i = 0; i &lt; topLinks.length; i++) {
          l = topLinks[i];

          l.addEventListener('focus', function(event) {
            var tgt = event.currentTarget;

            if (tgt.nextElementSibling) {
              tgt.nextElementSibling.style.left = "0";
            }
          });

          l.addEventListener('blur', function(event) {
            var tgt = event.currentTarget;

            if (tgt.nextElementSibling) {
              tgt.nextElementSibling.style.left = '-3000em';
            }
          });

        }

        var popupLinks = document.querySelectorAll('nav > ul > li > ul > li > a');

        for (i = 0; i &lt; popupLinks.length; i++) {
          l = popupLinks[i];

          l.addEventListener('focus', function(event) {
            var tgt = event.currentTarget;
            tgt.parentNode.parentNode.style.left = '0';
          });

          l.addEventListener('blur', function(event) {
            var tgt = event.currentTarget;
            tgt.parentNode.parentNode.style.left = '-3000em';
          });
        }


      </script>

      <h2>HTML Code</h2>
      <pre><code id="sc1"></code></pre>

      <script>
        sourceCode.add('sc1', 'example');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>


    </contents>
  </slide>

  <slide>
    <title>Drop Down Navigation Links: ARIA Menu Button Pattern</title>
    <style>

ul.example {
  margin: 10px;
  padding: 10px;
  font-size: 110%;
  list-style: none;
  background-color: #EEEEEE;
}

.menu_button {
  position: relative;
}


a[role="button"] {
  font-size: 110%;
  padding: 0.25em;
  width: 12em;
  text-decoration: none;
  color: black;
}

a[role="button"]:after {
  content: url('images/down-arrow-brown.png');
  padding-left: .25em;
}

ul[role="menu"] {
  margin: 0;
  padding: 0;
  position: absolute;
  font-size: 110%;

  list-style: none;
  background-color: #ccddff;
  display: none;
}

ul[role="menu"] li {
  margin: 0;
  padding: 0;
}

ul[role="menu"] a[role="menuitem"],
ul[role="menu"] a[role="menuitem"]:visited {
  display: block;
  text-decoration: none;
  padding: 0.25em;
  padding-left: 0.5em;
  padding-right: 0.5em;
  background-color: #ccddff;
  width: 22em;
  color: black;
}

/* focus and hover styling */

a[role="button"]:focus,
a[role="button"]:hover {
  border: 2px solid black;
  background-color: #ccddff;
}

ul[role="menu"] a[role="menuitem"]:focus,
ul[role="menu"] a[role="menuitem"]:hover{
  background-color: #ccddff;
  color: black;
}
    </style>
    <contents>

    <ul>
      <li><kbd>tab</kbd> key provides navigation betwen a set of menu buttons.</li>
      <li><kbd>up</kbd> and <kbd>down</kbd> keys navigate links in popup menu.</li>
      <li>Next step and visual affordances help people identify the popup menu of links.</li>
    </ul>


      <script src="js/Menubutton2.js" type="text/javascript"></script>
      <script src="js/MenubuttonPopupMenuLinks.js" type="text/javascript"></script>
      <script src="js/MenubuttonMenuItemLinks.js" type="text/javascript"></script>

      <div id="example">
        <nav aria-label="primary">
          <ul class="example">
            <li class="menu_button">
              <a role="button" aria-haspopup="true" aria-controls="menu1" href="#">About</a>
              <ul id="menu1" role="menu" aria-label="About">
                <li role="none">
                  <a role="menuitem" href="#overview">Overview</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#admin">Administration</a>
                </li>
                <li role="none">
                  <a id="menubar113" role="menuitem" href="#facts">Facts</a>
                </li>
                <li>
                  <a role="menuitem" href="#tours" >Campus
                    Tours</a>
                </li>
              </ul>
            </li>
            <li class="menu_button">
              <a role="button" aria-haspopup="true" aria-controls="menu2" href="#">Admissions</a>
              <ul id="menu2" role="menu" aria-label="Admissions">
                <li role="none">
                  <a role="menuitem" href="#apply">Apply</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#tuition">Tuition</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#signup">Sign Up</a>
                </li>
                <li role="separator"></li>
                <li role="none">
                  <a role="menuitem" href="#visit">Visit</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#photo">Photo Tour</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#connect">Connect</a>
                </li>
              </ul>
            </li>
            <li  class="menu_button">
              <a role="button" aria-haspopup="true" aria-controls="menu3" href="#">Academics</a>
              <ul id="menu3" role="menu" aria-label="Academics">
                <li role="none">
                  <a role="menuitem" href="#colleges">Colleges &amp; Schools</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#programs">Programs of Study</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#honors">Honors Programs</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#online">Online Courses</a>
                </li>
                <li role="separator"></li>
                <li role="none">
                  <a role="menuitem" href="#explorer">Course Explorer</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#register">Register for Class</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#academic">Academic Calendar</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#tanscripts">Transcripts</a>
                </li>
              </ul>
            </li>
          </ul>
        </nav>
      </div>

      <script>
        var mbs = document.querySelectorAll('a[role="button"]');

        for (var i = 0; i &lt; mbs.length; i++) {
          console.log('TEST: ' + i);
          var mb = new Menubutton(mbs[i]);
          mb.init();
        }
      </script>


      <h2>HTML Code</h2>
      <pre><code id="sc1"></code></pre>

      <script>
        sourceCode.add('sc1', 'example');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>


    </contents>
  </slide>

  <slide>
    <title>Drop Down Navigation Links: ARIA Menubar Pattern</title>
    <style>
ul[role="menubar"] {
  margin: 10px;
  padding: 10px;
  font-size: 110%;
  list-style: none;
  background-color: #EEEEEE;
}

ul[role="menubar"] [role="menuitem"],
ul[role="menubar"] [role="separator"] {
  padding: 0.25em;
  background-color: #EEEEEE;
  border: 2px solid #EEEEEE;
}

ul[role="menubar"] [role="separator"] {
  padding-top: 0.15em;
  background-image: url('images/separator.png');
  background-position: center;
  background-repeat: repeat-x;
}

ul[role="menubar"] [role="menuitem"]:focus,
ul[role="menubar"] [role="menuitem"]:hover,
ul[role="menubar"] [role="separator"]:focus,
ul[role="menubar"] [role="separator"]:hover {
  background-color: black;
  color: white;
}

ul[role="menubar"] a[role="menuitem"] {
  text-decoration: none;
  color: black;
}

ul[role="menubar"] li {
  list-style: none;
  margin: 0;
  padding: 0;
}

ul[role="menubar"] > li {
  display: inline;
  position: relative;
}

ul[role="menubar"] > li > a:after {
  content: url('images/down-arrow-brown.png');
  padding-left: .25em;
}


ul[role="menubar"] ul[role="menu"] {
  display: none;
  position: absolute;
  top: -2px;
  left: 0;
  margin: 0;
  padding: 0;
}


ul[role="menubar"] ul[role="menu"] li a {
  display: block;
  width: 10em;
}

ul[role="menubar"] ul[role="menu"] a[aria-haspopup="true"]:after {
  content: url('images/right-arrow-brown.png');
  padding-right: 2em;
}
    </style>
    <contents>

    <ul>
      <li><kbd>tab</kbd> key provides navigation into and out of menubar of links.</li>
      <li><kbd>left</kbd>, <kbd>right</kbd>, <kbd>up</kbd> and <kbd>down</kbd> keys navigate links in popup menus.</li>
      <li>Next step and visual affordances help people identify the popup menu of links.</li>
    </ul>

      <script src="js/MenubarLinks.js" type="text/javascript"></script>
      <script src="js/MenubarItemLinks.js" type="text/javascript"></script>
      <script src="js/PopupMenuLinks.js" type="text/javascript"></script>
      <script src="js/PopupMenuItemLinks.js" type="text/javascript"></script>

      <div id="example">
        <nav aria-label="primary">
          <ul id="menubar1" role="menubar" aria-label="Mythical University Menu 1">
            <li>
              <a role="menuitem" aria-haspopup="true" aria-expanded="false" href="#">About</a>
              <ul role="menu" aria-label="About">
                <li role="none">
                  <a role="menuitem" href="#overview">Overview</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#admin">Administration</a>
                </li>
                <li role="none">
                  <a id="menubar113" role="menuitem" href="#facts">Facts</a>
                </li>
                <li>
                  <a role="menuitem" href="#tours" >Campus
                    Tours</a>
                </li>
              </ul>
            </li>
            <li>
              <a role="menuitem" aria-haspopup="true" aria-expanded="false" href="#">Admissions</a>
              <ul role="menu" aria-label="Admissions">
                <li role="none">
                  <a role="menuitem" href="#apply">Apply</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#tuition">Tuition</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#signup">Sign Up</a>
                </li>
                <li role="separator"></li>
                <li role="none">
                  <a role="menuitem" href="#visit">Visit</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#photo">Photo Tour</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#connect">Connect</a>
                </li>
              </ul>
            </li>
            <li>
              <a role="menuitem" aria-haspopup="true" aria-expanded="false" href="#">Academics</a>
              <ul role="menu" aria-label="Academics">
                <li role="none">
                  <a role="menuitem" href="#colleges">Colleges &amp; Schools</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#programs">Programs of Study</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#honors">Honors Programs</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#online">Online Courses</a>
                </li>
                <li role="separator"></li>
                <li role="none">
                  <a role="menuitem" href="#explorer">Course Explorer</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#register">Register for Class</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#academic">Academic Calendar</a>
                </li>
                <li role="none">
                  <a role="menuitem" href="#tanscripts">Transcripts</a>
                </li>
              </ul>
            </li>
          </ul>
        </nav>
    </div>

      <script type="text/javascript">
              var menubar = new Menubar(document.getElementById('menubar1'));
              menubar.init();
            </script>


      <h2>HTML Code</h2>
      <pre><code id="sc1"></code></pre>

      <script>
        sourceCode.add('sc1', 'example');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>

    </contents>
  </slide>

  <slide>
    <title>Popup Error Message Example Summary</title>
    <contents>

      <h2 id="ID_COMMON">Common Features of All Examples</h2>

      <table class="survey table table-striped" aria-labelledby="ID_COMMON">
        <thead>
          <tr>
            <th>Feature</th>
            <th>Markup</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Required control</td>
            <td><code>required</code> attribute</td>
            <td>
              <ul>
                <li>Use the HTML5 <code>required</code> attribute communicate to assistive technology that the form field is required.</li>
                <li>The HTML5 <code>required</code> attribute is used over other techniques, since it provides the information using the native semantics of HTML5.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>Invalid value</td>
            <td><code>aria-invalid</code> attribute</td>
            <td>
              The <code>aria-invalid</code> attribute provides a means to communicate to assistive technology that the form field has an invalid value.
            </td>
          </tr>
          <tr>
            <td>Invalid value awareness</td>
            <td><code>role="status"</code> attribute</td>
            <td>
              <ul>
                <li>
                  The <code>role="status"</code> attribute on the element containing the error message creates a live region that will automatically speak when content changes.
                </li>
                <li>
                  The <code>status</code> value is used since it will not interrupt other speech, for example if the value <code>alert</code> was used it would immediately stop any other speech and announce the change, which in this case would be disorienting to the user.
                </li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>

      <h2 id="ID_ERROR_MSG">Referencing the Error Message</h2>

      <table class="survey table table-striped" aria-labelledby="ID_ERROR_MSG">
        <thead>
          <tr>
            <th>Example</th>
            <th>Accessible<br/>Name</th>
            <th>Accessible<br/>Description</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th>0</th>
            <td>
              <code>label[for]</code> element used to reference the controls label.
            </td>
            <td>
              <em>none</em>
            </td>
            <td>
              No information provided on the error message when focus is moved to the invalide form control.
            </td>
          </tr>
          <tr>
            <th>1</th>
            <td>
              <ul>
                <li><code>label[for]</code> element used to reference the controls label.</li>
                <li>If there is an error on a form control, the <code>label[for]</code> attribute is added to the error message to also point to the control.</li>
              </ul>
            </td>
            <td>
              <em>none</em>
            </td>
             <td>
              Error information is provided through the accessible name property.
            </td>
         </tr>
          <tr>
            <th>2</th>
            <td>
              <code>label[for]</code> element used to reference the controls label.
            </td>
            <td>
              <code>aria-describedby</code> attribute used to reference the error message.
            </td>
            <td>
              Error information is provided through the accessible description property.
            </td>
          </tr>
          <tr>
            <th>3</th>
            <td>
              <code>label[for]</code> element used to reference the controls label.
            </td>
            <td>
              <code>title</code> attribute contains the error message content visible in the graphical rendering.
            </td>
            <td>
              Error information is provided through the accessible description property.
            </td>
          </tr>
          <tr>
            <th>4</th>
            <td>
              <code>aria-labelledby</code> attribute is used to reference both label and the error message.
            </td>
            <td>
              <em>none</em>
            </td>
            <td>
              Error information is provided through the accessible name property.
            </td>
          </tr>
          <tr>
            <th>5</th>
            <td>
              <ul>
                <li><code>label[for]</code> element used to reference the controls label.</li>
                <li>If there is an error on a form control, the <code>aria-label</code> attribute is added and includes both the label and the error message.</li>
              </ul>
            </td>
            <td>
              <em>none</em>
            </td>
            <td>
              Error information is provided through the accessible name property.
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>


  <slide>
    <title>Popup Error Example 1: no reference to error message</title>

    <script src="js/submit-order.js" type="text/javascript"></script>

    <style id="style" type="text/css">
      div {
        border: solid medium transparent;
      }

      div.focus {
        border-color: black;
        background-color: #EEEEEE;
      }

      div.hover {
        border-color: black;
        background-color: #EEEEEE;
      }

      label.focus,
      input[type="text"]:focus,
      select:focus {
        background-color: #EEEEEE;
        outline: medium solid black;
      }

      label.hover,
      input[type="text"]:hover,
      select:hover {
        background-color: #EEEEEE;
        outline: medium solid black;
      }

      div.button {
        position: relative;
        left: -0.25em;
        width: 9em;
      }

      label input[type="radio"],
      label input[type="checkbox"] {
        margin-left: 0.25em;
      }


      div#id-errors {
        color: red;
        display: none;
        margin-left: 1em;
        border: thin solid red;
        width: 25em;
      }

      div#id-errors a {
        color: red;
      }

      h2, h3 {
        margin: 0;
        padding: 0;
        margin-top: 1em;
      }

      label {
      display: block;
        margin: 0;
        padding: 0;
        font-weight: normal;
      }

      fieldset,
      legend {
        padding: 0;
        margin: 0;
        margin-top: 1em;
      }

      legend {
        margin-top: 1em;
        font-weight: bold;
        font-size: 110%;
      }

      div.text,
      div.select,
      input[type="submit"] {
        margin-top: 0.5em;
      }

      span.error,
        span.noerror {
        display: inline;
      }

      span.error {
        color: red;
        border: thin solid red;
        padding: 0.25em;
      }

      span.noerror {
        color: transparent;
        border: thin solid transparent;
        padding: 0.25em;
      }

    </style>

    <contents>

      <h2>Features</h2>
      <ul>
        <li><code>label[for]</code> element is used to label form control.</li>
        <li>HTML5 <code>required</code> attribute to identify a form control is required.</li>
        <li><code>aria-invalid</code> attribute is used to identify a form control has an invalid value.</li>
      </ul>

      <div role="region" aria-label="Example">

        <div id="id-errors" role="region" aria-label="Error information">

        </div>

        <form id="form">
          <h2>Pizza Order Form</h2>

          <div class="text">
            <label for="id-name">Name</label>
            <input id="id-name"
              required="true"
              aria-invalid="false"
              type="text"
              size="30"
              onblur="checkName()"/>
            <span id="id-name-error" class="noerror" > </span>
          </div>

          <div class="text">
            <label for="id-address">Address</label>
            <input id="id-address"
              required="true"
              aria-invalid="false"
              type="text"
              size="40"
              onblur="checkAddress()"/>
            <span id="id-address-error" class="noerror" > </span>
          </div>

          <div class="text">
            <label for="id-phone">Phone</label>
            <input id="id-phone"
              required="true"
              aria-invalid="false"
              type="text"
              size="14"
              onblur="checkPhone()"/>
            <span id="id-phone-error" class="noerror"> </span>
          </div>

          <div class="select">
            <label for="id-delivery">Delivery Method</label>
            <select id="id-delivery">
              <option>Eat in store</option>
              <option>Pickup</option>
              <option>Home delivery</option>
            </select>
          </div>

          <fieldset>
            <legend>Crust</legend>
            <div class="button">
              <label><input id="id-thin" name="crust" type="radio" value="Thin" required=""/> Thin</label>
            </div>
            <div class="button">
              <label><input id="id-classic" name="crust" type="radio" value="Classic"  /> Classic</label>
            </div>
            <div class="button">
              <label><input id="id-deep" name="crust" type="radio" value="Deep Dish"  /> Deep Dish</label>
            </div>
          </fieldset>

          <fieldset>
            <legend>Toppings</legend>
            <div class="button">
              <label>
                <input id="id-sausage"
                  name="topping"
                  type="checkbox"
                  value="Sausage"/>
                Sausage
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-pepperoni"
                  name="topping"
                  type="checkbox"
                  value="Pepperoni"/>
                Pepperoni
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-mushrooms"
                  name="topping"
                  type="checkbox"
                  value="Mushrooms"/>
                Mushrooms
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-onions"
                  name="topping"
                  type="checkbox"
                  value="Onions"/>
                Onions
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-green"
                  name="topping"
                  type="checkbox"
                  value="Green Peppers"/>
                Green Peppers
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-black"
                  name="topping"
                  type="checkbox"
                  value="Black Olives"/>
                Back Olives
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-x-cheese"
                  name="topping"
                  type="checkbox"
                  value="Extra Cheese"/>
                Extra cheese
              </label>
            </div>
          </fieldset>

          <input type="submit" value="Submit Order" onclick="submitOrder(event)"/>

        </form>

        <div id="order">

        </div>

      </div>

      <script id="script" type="text/javascript">

        // Focus styling code

        $(document).ready( function() {

        $('input[type="radio"]').focus(function() {
          $(this).parent().addClass('focus');
        });

        $('input[type="radio"]').blur(function() {
          $(this).parent().removeClass('focus');
        });

        $('input[type="radio"]').parent().hover(function() {
          $(this).addClass('hover');
        },
        function() {
          $(this).removeClass('hover');
        });


        $('input[type="checkbox"]').focus(function() {
          $(this).parent().addClass('focus');
        });

        $('input[type="checkbox"]').blur(function() {
          $(this).parent().removeClass('focus');
        });

        $('input[type="checkbox"]').parent().hover(function() {
          $(this).addClass('hover');
        },
        function() {
          $(this).removeClass('hover');
        });


        });

        //
        // Scripting for submit button form validation

        function moveFocus(id) {
          $('#'+id).focus();
        }

        function clearErrorFeedback() {
          $('div#id-errors').empty();
          $('div#id-errors').css('display', 'none');
        }

        function exampleErrorFeedback(errors) {
          var num_errors = errors.length;

          str = (num_errors === 1 ? "1 Error\n" : num_errors + " Errors\n");

          $('div#id-errors').css('display', 'block');

          $('div#id-errors').append('&lt;h2>&lt;a id="id-errors-start">&lt;/a>' + str + '&lt;/h2>');

          var messages = "&lt;ol>\n";

          for (var i = 0; i &lt; num_errors; i++) {
            var e = errors[i];
            messages += '&lt;li>&lt;a href="#' + e.id + '" onclick="moveFocus(\'' + e.id + '\')">' + e.message + '&lt;/a>&lt;/li>\n';
            }
            messages += "&lt;/ol>\n";
            $('div#id-errors').append(messages);

            moveFocus("id-errors-start");
          }

        //
        // Scripting for inline form validation

        function checkItem(id, flag, message) {
        var em = $('#' + id + '-error');
        $(em).empty();
        var ei = $('#' + id);

        if (flag) {
        $(ei).attr('aria-invalid', 'true');
        $(em).append(message);
        $(em).removeClass('noerror');
        $(em).addClass('error');
        }
        else {
        $(ei).attr('aria-invalid', 'false');
        $(em).addClass('noerror');
        $(em).removeClass('error');
        }
        }

        function checkName() {
        var ei = $('#id-name');
        checkItem('id-name',($(ei).val().length === 0), "Name cannot be empty!  Enter your name");
        }

        function checkAddress() {
        var ei = $('#id-address');
        checkItem('id-address',($(ei).val().length === 0), "Address cannot be empty!  Enter your address");
        }

        function checkPhone() {
        var ei = $('#id-phone');
        var phone = $(ei).val();
        if (phone.length === 0) {
        checkItem('id-phone',true, "Phone cannot be empty!  Enter your phone number");
        }
        else {
        p = "";
        for (var i = 0; i &lt; phone.length; i++) {
        var c = phone[i];
        if ((c >= "0") &amp;&amp; (c &lt;= "9")) {
        p += c;
        }
        }
        checkItem('id-phone', ((p.length !== 7) &amp;&amp; (p.length !== 10)), "Not a valid phone number, use this format (111) 222-3333");
        }
        }

      </script>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'form');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>

    </contents>
  </slide>

  <slide>
    <title>Popup Error Example 1: Assistive Technology Support</title>
    <contents>

      <table class="survey table table-striped" aria-labelledby="h1_title">
        <thead>
          <tr>
            <th>Support</th>
            <th>Screen Reader</th>
            <th>Browser</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              EDGE
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              Firefox
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Edge
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Firefox
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              Voice Over High Sierra
            </td>
            <td>
              Safari 11.1
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              Voice Over High Sierra
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>

  <slide>
    <title>Popup Error Example 2: label[for] references error message</title>

    <script src="js/submit-order.js" type="text/javascript"></script>

    <style id="style" type="text/css">
      div {
        border: solid medium transparent;
      }

      div.focus {
        border-color: black;
        background-color: #EEEEEE;
      }

      div.hover {
        border-color: black;
        background-color: #EEEEEE;
      }

      label.focus,
      input[type="text"]:focus,
      select:focus {
        background-color: #EEEEEE;
        outline: medium solid black;
      }

      label.hover,
      input[type="text"]:hover,
      select:hover {
        background-color: #EEEEEE;
        outline: medium solid black;
      }

      div.button {
        position: relative;
        left: -0.25em;
        width: 9em;
      }

      label input[type="radio"],
      label input[type="checkbox"] {
        margin-left: 0.25em;
      }


      div#id-errors {
        color: red;
        display: none;
        margin-left: 1em;
        border: thin solid red;
        width: 25em;
      }

      div#id-errors a {
        color: red;
      }

      h2, h3 {
        margin: 0;
        padding: 0;
        margin-top: 1em;
      }

      label {
      display: block;
        margin: 0;
        padding: 0;
        font-weight: normal;
      }

      fieldset,
      legend {
        padding: 0;
        margin: 0;
        margin-top: 1em;
      }

      legend {
        margin-top: 1em;
        font-weight: bold;
        font-size: 110%;
      }

      div.text,
      div.select,
      input[type="submit"] {
        margin-top: 0.5em;
      }

      label.error,
        span.noerror {
        display: inline;
      }

      label.error {
        color: red;
        border: thin solid red;
        padding: 0.25em;
      }

      label.noerror {
        color: transparent;
        border: thin solid transparent;
        padding: 0.25em;
      }

    </style>

    <contents>

      <h2>Features</h2>
      <ul>
        <li><code>label[for]</code> element is used to label form control.</li>
        <li><code>label[for]</code> element is used for error feedback.</li>
        <li>HTML5 <code>required</code> attribute to identify a form control is required.</li>
        <li><code>aria-invalid</code> attribute is used to identify a form control has an invalid value.</li>
      </ul>

      <div role="region" aria-label="Example">

        <div id="id-errors" role="region" aria-label="Error information">

        </div>

        <form id="form">
          <h2>Pizza Order Form</h2>

          <div class="text">
            <label for="id-name">Name</label>
            <input id="id-name"
              required="true"
              aria-invalid="false"
              type="text"
              size="30"
              onblur="checkName()"/>
            <label for="id-name" id="id-name-error" class="noerror" > </label>
          </div>

          <div class="text">
            <label for="id-address">Address</label>
            <input id="id-address"
              required="true"
              aria-invalid="false"
              type="text"
              size="40"
              onblur="checkAddress()"/>
            <label for="id-address"  id="id-address-error" class="noerror" > </label>
          </div>

          <div class="text">
            <label for="id-phone">Phone</label>
            <input id="id-phone"
              required="true"
              aria-invalid="false"
              type="text"
              size="14"
              onblur="checkPhone()"/>
            <label for="id-phone"  id="id-phone-error" class="noerror"> </label>
          </div>

          <div class="select">
            <label for="id-delivery">Delivery Method</label>
            <select id="id-delivery">
              <option>Eat in store</option>
              <option>Pickup</option>
              <option>Home delivery</option>
            </select>
          </div>

          <fieldset>
            <legend>Crust</legend>
            <div class="button">
              <label><input id="id-thin" name="crust" type="radio" value="Thin" required="true"/> Thin</label>
            </div>
            <div class="button">
              <label><input id="id-classic" name="crust" type="radio" value="Classic" required="true" /> Classic</label>
            </div>
            <div class="button">
              <label><input id="id-deep" name="crust" type="radio" value="Deep Dish" required="true" /> Deep Dish</label>
            </div>
          </fieldset>

          <fieldset>
            <legend>Toppings</legend>
            <div class="button">
              <label>
                <input id="id-sausage"
                  name="topping"
                  type="checkbox"
                  value="Sausage"/>
                Sausage
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-pepperoni"
                  name="topping"
                  type="checkbox"
                  value="Pepperoni"/>
                Pepperoni
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-mushrooms"
                  name="topping"
                  type="checkbox"
                  value="Mushrooms"/>
                Mushrooms
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-onions"
                  name="topping"
                  type="checkbox"
                  value="Onions"/>
                Onions
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-green"
                  name="topping"
                  type="checkbox"
                  value="Green Peppers"/>
                Green Peppers
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-black"
                  name="topping"
                  type="checkbox"
                  value="Black Olives"/>
                Back Olives
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-x-cheese"
                  name="topping"
                  type="checkbox"
                  value="Extra Cheese"/>
                Extra cheese
              </label>
            </div>
          </fieldset>

          <input type="submit" value="Submit Order" onclick="submitOrder(event)"/>

        </form>

        <div id="order">

        </div>

      </div>

      <script id="script" type="text/javascript">

        // Focus styling code

        $(document).ready( function() {

        $('input[type="radio"]').focus(function() {
          $(this).parent().addClass('focus');
        });

        $('input[type="radio"]').blur(function() {
          $(this).parent().removeClass('focus');
        });

        $('input[type="radio"]').parent().hover(function() {
          $(this).addClass('hover');
        },
        function() {
          $(this).removeClass('hover');
        });


        $('input[type="checkbox"]').focus(function() {
          $(this).parent().addClass('focus');
        });

        $('input[type="checkbox"]').blur(function() {
          $(this).parent().removeClass('focus');
        });

        $('input[type="checkbox"]').parent().hover(function() {
          $(this).addClass('hover');
        },
        function() {
          $(this).removeClass('hover');
        });


        });

        //
        // Scripting for submit button form validation

        function moveFocus(id) {
          $('#'+id).focus();
        }

        function clearErrorFeedback() {
          $('div#id-errors').empty();
          $('div#id-errors').css('display', 'none');
        }

        function exampleErrorFeedback(errors) {
          var num_errors = errors.length;

          str = (num_errors === 1 ? "1 Error\n" : num_errors + " Errors\n");

          $('div#id-errors').css('display', 'block');

          $('div#id-errors').append('&lt;h2>&lt;a id="id-errors-start">&lt;/a>' + str + '&lt;/h2>');

          var messages = "&lt;ol>\n";

          for (var i = 0; i &lt; num_errors; i++) {
            var e = errors[i];
            messages += '&lt;li>&lt;a href="#' + e.id + '" onclick="moveFocus(\'' + e.id + '\')">' + e.message + '&lt;/a>&lt;/li>\n';
            }
            messages += "&lt;/ol>\n";
            $('div#id-errors').append(messages);

            moveFocus("id-errors-start");
          }

        //
        // Scripting for inline form validation

        function checkItem(id, flag, message) {
        var em = $('#' + id + '-error');
        $(em).empty();
        var ei = $('#' + id);

        if (flag) {
        $(ei).attr('aria-invalid', 'true');
        $(em).append(message);
        $(em).removeClass('noerror');
        $(em).addClass('error');
        }
        else {
        $(ei).attr('aria-invalid', 'false');
        $(em).addClass('noerror');
        $(em).removeClass('error');
        }
        }

        function checkName() {
        var ei = $('#id-name');
        checkItem('id-name',($(ei).val().length === 0), "Name cannot be empty!  Enter your name");
        }

        function checkAddress() {
        var ei = $('#id-address');
        checkItem('id-address',($(ei).val().length === 0), "Address cannot be empty!  Enter your address");
        }

        function checkPhone() {
        var ei = $('#id-phone');
        var phone = $(ei).val();
        if (phone.length === 0) {
        checkItem('id-phone',true, "Phone cannot be empty!  Enter your phone number");
        }
        else {
        p = "";
        for (var i = 0; i &lt; phone.length; i++) {
        var c = phone[i];
        if ((c >= "0") &amp;&amp; (c &lt;= "9")) {
        p += c;
        }
        }
        checkItem('id-phone', ((p.length !== 7) &amp;&amp; (p.length !== 10)), "Not a valid phone number, use this format (111) 222-3333");
        }
        }

      </script>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'form');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>

    </contents>
  </slide>

  <slide>
    <title>Popup Error Example 2: Assistive Technology Support</title>
    <contents>

      <table class="survey table table-striped" aria-labelledby="h1_title">
        <thead>
          <tr>
            <th>Support</th>
            <th>Screen Reader</th>
            <th>Browser</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              EDGE
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              Firefox
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Edge
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Firefox
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              Voice Over High Sierra
            </td>
            <td>
              Safari 11.1
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              Voice Over High Sierra
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>

  <slide>
    <title>Popup Error Example 3: aria-describedby reference to error message</title>

    <script src="js/submit-order.js" type="text/javascript"></script>

    <style type="text/css">
      div {
      border: solid medium transparent;
      }

      div.focus {
      border-color: black;
      background-color: #FFFFA0;
      }

      div.hover {
      border-color: black;
      background-color: #EEEEEE;
      }


      input[type="text"]:focus,
      select:focus {
      background-color: #FFFFA0;
      outline: medium solid black;
      }

      input[type="text"]:hover,
      select:hover {
      background-color: #EEEEEE;
      outline: medium solid black;
      }


      div#id-errors {
      color: red;
      display: none;
      margin-left: 1em;
      border: thin solid red;
      width: 25em;
      }

      div#id-errors a {
      color: red;
      }

      h2, h3 {
      margin: 0;
      padding: 0;
      margin-top: 1em;
      }

      label {
      display: block;
      margin: 0;
      padding: 0;
      font-weight: normal;
      }

      fieldset,
      legend {
      padding: 0;
      margin: 0;
      margin-top: 1em;
      }

      legend {
      margin-top: 1em;
      font-weight: bold;
      font-size: 110%;
      }

      div.text,
      div.select,
      input[type="submit"] {
      margin-top: 0.5em;
      }

      label.error,
      lanel.noerror {
      display: inline;
      }

      label.error {
      color: red;
      border: thin solid red;
      padding: 0.25em;
      }

      label.noerror {
      color: transparent;
      border: thin solid transparent;
      padding: 0.25em;
      }

    </style>

    <contents>

      <h2>Features</h2>
      <ul>
        <li><code>label[for]</code> element is used to label form control.</li>
        <li>HTML5 <code>required</code> attribute to identify a form control is required.</li>
        <li><code>aria-invalid</code> attribute is used to identify a form control has an invalid value.</li>
        <li><code>role="status"</code> is used to autmatically announce errors in form controls.</li>
        <li><code>aria-describedby</code> is used to provide a programmatic reference to the error message, so assistive technologies could render information about the error (e.g. Braille).</li>
      </ul>


      <div role="region" aria-label="Example">

        <div id="id-errors" role="region" aria-label="Error information">

        </div>

        <form id="form">
          <h2>Pizza Order Form</h2>

          <div class="text">
            <label for="id-name">Name</label>
            <input id="id-name"
              required="true"
              aria-invalid="false"
              type="text"
              size="30"
              aria-describedby="id-name-error"
              onblur="checkName()"/>
            <label id="id-name-error" for="id-name" class="noerror" role="status"> </label>
          </div>

          <div class="text">
            <label for="id-address">Address</label>
            <input id="id-address"
              required="true"
              aria-invalid="false"
              type="text"
              size="40"
              aria-describedby="id-address-error"
              onblur="checkAddress()"/>
            <label id="id-address-error" for="id-address" class="noerror" role="status"> </label>
          </div>

          <div class="text">
            <label for="id-phone">Phone</label>
            <input id="id-phone"
              required="true"
              aria-invalid="false"
              type="text"
              size="14"
              aria-describedby="id-phone-error"
              onblur="checkPhone()"/>
            <label id="id-phone-error" for="id-phone" class="noerror" role="status"> </label>
          </div>

          <div class="select">
            <label for="id-delivery">Delivery Method</label>
            <select id="id-delivery">
              <option>Eat in store</option>
              <option>Pickup</option>
              <option>Home delivery</option>
            </select>
          </div>

          <fieldset>
            <legend>Crust</legend>
            <div class="button">
              <label><input id="id-thin" name="crust" type="radio" value="Thin" required="true"/> Thin</label>
            </div>
            <div class="button">
              <label><input id="id-classic" name="crust" type="radio" value="Classic" required="true" /> Classic</label>
            </div>
            <div class="button">
              <label><input id="id-deep" name="crust" type="radio" value="Deep Dish" required="true" aria-labelledby="id-thin id-deep"/> Deep Dish</label>
            </div>
          </fieldset>

          <fieldset>
            <legend>Toppings</legend>
            <div class="button">
              <label>
                <input id="id-sausage"
                  name="topping"
                  type="checkbox"
                  value="Sausage"/>
                Sausage
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-pepperoni"
                  name="topping"
                  type="checkbox"
                  value="Pepperoni"/>
                Pepperoni
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-mushrooms"
                  name="topping"
                  type="checkbox"
                  value="Mushrooms"/>
                Mushrooms
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-onions"
                  name="topping"
                  type="checkbox"
                  value="Onions"/>
                Onions
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-green"
                  name="topping"
                  type="checkbox"
                  value="Green Peppers"/>
                Green Peppers
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-black"
                  name="topping"
                  type="checkbox"
                  value="Black Olives"/>
                Back Olives
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-x-cheese"
                  name="topping"
                  type="checkbox"
                  value="Extra Cheese"
                  aria-labelledby="id-x-cheese id-toppings"/>
                Extra cheese
              </label>
            </div>
          </fieldset>

          <input type="submit" value="Submit Order" onclick="submitOrder(event)"/>

        </form>

        <div id="order">

        </div>

      </div>

      <script id="script" type="text/javascript">

        // Focus styling code

        $(document).ready( function() {

        $('input[type="radio"]').focus(function() {
        $(this).parent().addClass('focus');
        });

        $('input[type="radio"]').blur(function() {
        $(this).parent().removeClass('focus');
        });

        $('input[type="radio"]').parent().hover(function() {
        $(this).addClass('hover');
        },
        function() {
        $(this).removeClass('hover');
        });


        $('input[type="checkbox"]').focus(function() {
        $(this).parent().addClass('focus');
        });

        $('input[type="checkbox"]').blur(function() {
        $(this).parent().removeClass('focus');
        });

        $('input[type="checkbox"]').parent().hover(function() {
        $(this).addClass('hover');
        },
        function() {
        $(this).removeClass('hover');
        });


        });

        //
        // Scripting for submit button form validation

        function moveFocus(id) {
        $('#'+id).focus();
        }

        function clearErrorFeedback() {
        $('div#id-errors').empty();
        $('div#id-errors').css('display', 'none');
        }

        function exampleErrorFeedback(errors) {
        var num_errors = errors.length;

        str = (num_errors === 1 ? "1 Error\n" : num_errors + " Errors\n");

        $('div#id-errors').css('display', 'block');

        $('div#id-errors').append('&lt;h2>&lt;a id="id-errors-start">&lt;/a>' + str + '&lt;/h2>');

        var messages = "&lt;ol>\n";

          for (var i = 0; i &lt; num_errors; i++) {
          var e = errors[i];
          messages += '&lt;li>&lt;a href="#' + e.id + '" onclick="moveFocus(\'' + e.id + '\')">' + e.message + '&lt;/a>&lt;/li>\n';
          }
          messages += "&lt;/ol>\n";
          $('div#id-errors').append(messages);

          moveFocus("id-errors-start");
          }

        //
        // Scripting for inline form validation

        function checkItem(id, flag, message) {
        var em = $('#' + id + '-error');
        $(em).empty();
        var ei = $('#' + id);

        if (flag) {
        $(ei).attr('aria-invalid', 'true');
        $(em).append(message);
        $(em).removeClass('noerror');
        $(em).addClass('error');
        }
        else {
        $(ei).attr('aria-invalid', 'false');
        $(em).addClass('noerror');
        $(em).removeClass('error');
        }
        }

        function checkName() {
        var ei = $('#id-name');
        checkItem('id-name',($(ei).val().length === 0), "Name cannot be empty!  Enter your name");
        }

        function checkAddress() {
        var ei = $('#id-address');
        checkItem('id-address',($(ei).val().length === 0), "Address cannot be empty!  Enter your address");
        }

        function checkPhone() {
        var ei = $('#id-phone');
        var phone = $(ei).val();
        if (phone.length === 0) {
        checkItem('id-phone',true, "Phone cannot be empty!  Enter your phone number");
        }
        else {
        p = "";
        for (var i = 0; i &lt; phone.length; i++) {
        var c = phone[i];
        if ((c >= "0") &amp;&amp; (c &lt;= "9")) {
        p += c;
        }
        }
        checkItem('id-phone', ((p.length !== 7) &amp;&amp; (p.length !== 10)), "Not a valid phone number, use this format (111) 222-3333");
        }
        }

      </script>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'form');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>

    </contents>
  </slide>

  <slide>
    <title>Popup Error Example 3: Assistive Technology Support</title>
    <contents>

      <table class="survey table table-striped" aria-labelledby="h1_title">
        <thead>
          <tr>
            <th>Support</th>
            <th>Screen Reader</th>
            <th>Browser</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              EDGE
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              Firefox
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Edge
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Firefox
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              Voice Over High Sierra
            </td>
            <td>
              Safari 11.1
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              Voice Over High Sierra
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>

  <slide>
    <title>Popup Error Example 4: title attribute used for error message</title>

    <script src="js/submit-order.js" type="text/javascript"></script>

    <style type="text/css">
      div {
      border: solid medium transparent;
      }

      div.focus {
      border-color: black;
      background-color: #FFFFA0;
      }

      div.hover {
      border-color: black;
      background-color: #EEEEEE;
      }


      input[type="text"]:focus,
      select:focus {
      background-color: #FFFFA0;
      outline: medium solid black;
      }

      input[type="text"]:hover,
      select:hover {
      background-color: #EEEEEE;
      outline: medium solid black;
      }


      div#id-errors {
      color: red;
      display: none;
      margin-left: 1em;
      border: thin solid red;
      width: 25em;
      }

      div#id-errors a {
      color: red;
      }

      h2, h3 {
      margin: 0;
      padding: 0;
      margin-top: 1em;
      }

      label {
      display: block;
      margin: 0;
      padding: 0;
      font-weight: normal;
      }

      fieldset,
      legend {
      padding: 0;
      margin: 0;
      margin-top: 1em;
      }

      legend {
      margin-top: 1em;
      font-weight: bold;
      font-size: 110%;
      }

      div.text,
      div.select,
      input[type="submit"] {
      margin-top: 0.5em;
      }

      label.error,
      lanel.noerror {
      display: inline;
      }

      label.error {
      color: red;
      border: thin solid red;
      padding: 0.25em;
      }

      label.noerror {
      color: transparent;
      border: thin solid transparent;
      padding: 0.25em;
      }

    </style>

    <contents>

      <h2>Features</h2>
      <ul>
        <li><code>label[for]</code> element is used to label form control.</li>
        <li>HTML5 <code>required</code> attribute to identify a form control is required.</li>
        <li><code>aria-invalid</code> attribute is used to identify a form control has an invalid value.</li>
        <li><code>role="status"</code> attribute is used to autmatically announce errors in form controls.</li>
        <li><code>title</code> attribute is used to provide an accessible description of the error message, so assistive technologies could render information about the error (e.g. Braille).</li>
      </ul>


      <div role="region" aria-label="Example">

        <div id="id-errors" role="region" aria-label="Error information">

        </div>

        <form id="form">
          <h2>Pizza Order Form</h2>

          <div class="text">
            <label for="id-name">Name</label>
            <input id="id-name"
              required="true"
              aria-invalid="false"
              type="text"
              size="30"
              title=""
              onblur="checkName()"/>
            <label id="id-name-error" for="id-name" class="noerror" role="status"> </label>
          </div>

          <div class="text">
            <label for="id-address">Address</label>
            <input id="id-address"
              required="true"
              aria-invalid="false"
              type="text"
              size="40"
              title=""
              onblur="checkAddress()"/>
            <label id="id-address-error" for="id-address" class="noerror" role="status"> </label>
          </div>

          <div class="text">
            <label for="id-phone">Phone</label>
            <input id="id-phone"
              required="true"
              aria-invalid="false"
              type="text"
              size="14"
              title=""
              onblur="checkPhone()"/>
            <label id="id-phone-error" for="id-phone" class="noerror" role="status"> </label>
          </div>

          <div class="select">
            <label for="id-delivery">Delivery Method</label>
            <select id="id-delivery">
              <option>Eat in store</option>
              <option>Pickup</option>
              <option>Home delivery</option>
            </select>
          </div>

          <fieldset>
            <legend>Crust</legend>
            <div class="button">
              <label><input id="id-thin" name="crust" type="radio" value="Thin" required="true"/> Thin</label>
            </div>
            <div class="button">
              <label><input id="id-classic" name="crust" type="radio" value="Classic" required="true" /> Classic</label>
            </div>
            <div class="button">
              <label><input id="id-deep" name="crust" type="radio" value="Deep Dish" required="true" aria-labelledby="id-thin id-deep"/> Deep Dish</label>
            </div>
          </fieldset>

          <fieldset>
            <legend>Toppings</legend>
            <div class="button">
              <label>
                <input id="id-sausage"
                  name="topping"
                  type="checkbox"
                  value="Sausage"/>
                Sausage
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-pepperoni"
                  name="topping"
                  type="checkbox"
                  value="Pepperoni"/>
                Pepperoni
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-mushrooms"
                  name="topping"
                  type="checkbox"
                  value="Mushrooms"/>
                Mushrooms
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-onions"
                  name="topping"
                  type="checkbox"
                  value="Onions"/>
                Onions
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-green"
                  name="topping"
                  type="checkbox"
                  value="Green Peppers"/>
                Green Peppers
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-black"
                  name="topping"
                  type="checkbox"
                  value="Black Olives"/>
                Back Olives
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-x-cheese"
                  name="topping"
                  type="checkbox"
                  value="Extra Cheese"
                  aria-labelledby="id-x-cheese id-toppings"/>
                Extra cheese
              </label>
            </div>
          </fieldset>

          <input type="submit" value="Submit Order" onclick="submitOrder(event)"/>

        </form>

        <div id="order">

        </div>

      </div>

      <script id="script" type="text/javascript">

        // Focus styling code

        $(document).ready( function() {

        $('input[type="radio"]').focus(function() {
        $(this).parent().addClass('focus');
        });

        $('input[type="radio"]').blur(function() {
        $(this).parent().removeClass('focus');
        });

        $('input[type="radio"]').parent().hover(function() {
        $(this).addClass('hover');
        },
        function() {
        $(this).removeClass('hover');
        });


        $('input[type="checkbox"]').focus(function() {
        $(this).parent().addClass('focus');
        });

        $('input[type="checkbox"]').blur(function() {
        $(this).parent().removeClass('focus');
        });

        $('input[type="checkbox"]').parent().hover(function() {
        $(this).addClass('hover');
        },
        function() {
        $(this).removeClass('hover');
        });


        });

        //
        // Scripting for submit button form validation

        function moveFocus(id) {
        $('#'+id).focus();
        }

        function clearErrorFeedback() {
        $('div#id-errors').empty();
        $('div#id-errors').css('display', 'none');
        }

        function exampleErrorFeedback(errors) {
        var num_errors = errors.length;

        str = (num_errors === 1 ? "1 Error\n" : num_errors + " Errors\n");

        $('div#id-errors').css('display', 'block');

        $('div#id-errors').append('&lt;h2>&lt;a id="id-errors-start">&lt;/a>' + str + '&lt;/h2>');

        var messages = "&lt;ol>\n";

          for (var i = 0; i &lt; num_errors; i++) {
          var e = errors[i];
          messages += '&lt;li>&lt;a href="#' + e.id + '" onclick="moveFocus(\'' + e.id + '\')">' + e.message + '&lt;/a>&lt;/li>\n';
          }
          messages += "&lt;/ol>\n";
          $('div#id-errors').append(messages);

          moveFocus("id-errors-start");
          }

        //
        // Scripting for inline form validation

        function checkItem(id, flag, message) {
        var em = $('#' + id + '-error');
        $(em).empty();
        var ei = $('#' + id);

        if (flag) {
        $(ei).attr('aria-invalid', 'true');
        $(ei).attr('title', message);
        $(em).append(message);
        $(em).removeClass('noerror');
        $(em).addClass('error');
        }
        else {
        $(ei).attr('aria-invalid', 'false');
        $(ei).attr('title', '');
        $(em).addClass('noerror');
        $(em).removeClass('error');
        }
        }

        function checkName() {
        var ei = $('#id-name');
        checkItem('id-name',($(ei).val().length === 0), "Name cannot be empty!  Enter your name");
        }

        function checkAddress() {
        var ei = $('#id-address');
        checkItem('id-address',($(ei).val().length === 0), "Address cannot be empty!  Enter your address");
        }

        function checkPhone() {
        var ei = $('#id-phone');
        var phone = $(ei).val();
        if (phone.length === 0) {
        checkItem('id-phone',true, "Phone cannot be empty!  Enter your phone number");
        }
        else {
        p = "";
        for (var i = 0; i &lt; phone.length; i++) {
        var c = phone[i];
        if ((c >= "0") &amp;&amp; (c &lt;= "9")) {
        p += c;
        }
        }
        checkItem('id-phone', ((p.length !== 7) &amp;&amp; (p.length !== 10)), "Not a valid phone number, use this format (111) 222-3333");
        }
        }

      </script>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'form');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>

    </contents>
  </slide>

  <slide>
    <title>Popup Error Example 4: Assistive Technology Support</title>
    <contents>

      <table class="survey table table-striped" aria-labelledby="h1_title">
        <thead>
          <tr>
            <th>Support</th>
            <th>Screen Reader</th>
            <th>Browser</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              EDGE
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              Firefox
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Edge
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Firefox
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              Voice Over High Sierra
            </td>
            <td>
              Safari 11.1
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              Voice Over High Sierra
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>

  <slide>
    <title>Popup Error Example 5: aria-labelledby attribute used for error message</title>

    <script src="js/submit-order.js" type="text/javascript"></script>

    <style type="text/css">
      div {
      border: solid medium transparent;
      }

      div.focus {
      border-color: black;
      background-color: #FFFFA0;
      }

      div.hover {
      border-color: black;
      background-color: #EEEEEE;
      }


      input[type="text"]:focus,
      select:focus {
      background-color: #FFFFA0;
      outline: medium solid black;
      }

      input[type="text"]:hover,
      select:hover {
      background-color: #EEEEEE;
      outline: medium solid black;
      }


      div#id-errors {
      color: red;
      display: none;
      margin-left: 1em;
      border: thin solid red;
      width: 25em;
      }

      div#id-errors a {
      color: red;
      }

      h2, h3 {
      margin: 0;
      padding: 0;
      margin-top: 1em;
      }

      div.text,
      div.select,
      div.group,
      input[type="submit"] {
      margin-top: 0.5em;
      }

      div.group {
      width: 20em;
      }

      div.group div.title {
      font-weight: bold;
      }

      span.error {
      color: red;
      border: thin solid red;
      padding: 0.25em;
      }

      span.noerror {
      color: transparent;
      border: thin solid transparent;
      padding: 0.25em;
      }

    </style>

    <contents>

      <h2>Features</h2>
      <ul>
        <li><code>aria-labelledby</code> attribute is used to label form control and includes element with error message.</li>
        <li>HTML5 <code>required</code> attribute to identify a form control is required.</li>
        <li><code>aria-invalid</code> attribute is used to identify a form control has an invalid value.</li>
        <li><code>role="status"</code> is used to autmatically announce errors in form controls.</li>
      </ul>

      <div role="region" aria-label="Example">

        <div id="id-errors" role="region" aria-label="Error information">

        </div>

        <form id="form">
          <h2>Pizza Order Form</h2>

          <div class="text">
            <div id="id-name-label">Name</div>
            <input id="id-name"
              required="true"
              aria-invalid="false"
              type="text"
              size="30"
              aria-labelledby="id-name-label id-name-error"
              onblur="checkName()"/>
            <span id="id-name-error" class="noerror" role="status"> </span>
          </div>

          <div class="text">
            <div id="id-address-label">Address</div>
            <input id="id-address"
              aria-required="true"
              aria-invalid="false"
              type="text"
              size="40"
              aria-labelledby="id-address-label id-address-error"
              onblur="checkAddress()"/>
            <span id="id-address-error" class="noerror" role="status"> </span>
          </div>

          <div class="text">
            <div id="id-phone-label">Phone</div>
            <input id="id-phone"
              aria-required="true"
              aria-invalid="false"
              type="text"
              size="14"
              aria-labelledby="id-phone-label id-phone-error"
              onblur="checkPhone()"/>
            <span id="id-phone-error" class="noerror" role="status"> </span>
          </div>

          <div class="select">
            <div id="id-delivery-label">Delivery Method</div>
            <select id="id-delivery" aria-labelledby="id-delivery-label">
              <option>Eat in store</option>
              <option>Pickup</option>
              <option>Home delivery</option>
            </select>
          </div>

          <div class="group">
            <div id="id-crust" class="title">Crust</div>
            <div class="button">
              <input id="id-thin" name="crust" type="radio" value="Thin" aria-required="true" aria-labelledby="id-thin id-crust"/> Thin
            </div>
            <div class="button">
              <input id="id-classic" name="crust" type="radio" value="Classic" aria-required="true" aria-labelledby="id-thin id-classic"/> Classic
            </div>
            <div class="button">
              <input id="id-deep" name="crust" type="radio" value="Deep Dish" aria-required="true" aria-labelledby="id-thin id-deep"/> Deep Dish
            </div>
          </div>

          <div class="group">
            <div id="id-toppings" class="title">Toppings</div>
            <div class="button">
              <input id="id-sausage"
                name="topping"
                type="checkbox"
                value="Sausage"
                aria-labelledby="id-sausage id-toppings"
                aria-describedby="id-special"/>
                Sausage
            </div>
            <div class="button">
              <input id="id-pepperoni"
                name="topping"
                type="checkbox"
                value="Pepperoni"
                aria-labelledby="id-pepperoni id-toppings"/>
                Pepperoni
            </div>
            <div class="button">
              <input id="id-mushrooms"
                name="topping"
                type="checkbox"
                value="Mushrooms"
                aria-labelledby="id-mushrooms id-toppings"/>
                Mushrooms
            </div>
            <div class="button">
              <input id="id-onions"
                name="topping"
                type="checkbox"
                value="Onions"
                aria-labelledby="id-onions id-toppings"/>
                Onions
            </div>
            <div class="button">
              <input id="id-green"
                name="topping"
                type="checkbox"
                value="Green Peppers"
                aria-labelledby="id-green id-toppings"/>
                Green Peppers
            </div>
            <div class="button">
              <input id="id-black"
                name="topping"
                type="checkbox"
                value="Black Olives"
                aria-labelledby="id-black id-toppings"/>
                Back Olives
            </div>
            <div class="button">
              <input id="id-x-cheese"
                name="topping"
                type="checkbox"
                value="Extra Cheese"
                aria-labelledby="id-x-cheese id-toppings"/>
                Extra cheese
            </div>
          </div>

          <input type="submit" value="Submit Order" onclick="submitOrder(event)"/>

        </form>

        <div id="order">

        </div>

      </div>

      <script id="script" type="text/javascript">

        // Focus styling code

        $(document).ready( function() {

        $('input[type="radio"]').focus(function() {
        $(this).parent().addClass('focus');
        });

        $('input[type="radio"]').blur(function() {
        $(this).parent().removeClass('focus');
        });

        $('input[type="radio"]').parent().hover(function() {
        $(this).addClass('hover');
        },
        function() {
        $(this).removeClass('hover');
        });


        $('input[type="checkbox"]').focus(function() {
        $(this).parent().addClass('focus');
        });

        $('input[type="checkbox"]').blur(function() {
        $(this).parent().removeClass('focus');
        });

        $('input[type="checkbox"]').parent().hover(function() {
        $(this).addClass('hover');
        },
        function() {
        $(this).removeClass('hover');
        });


        });

        //
        // Scripting for submit button form validation

        function moveFocus(id) {
        $('#'+id).focus();
        }

        function clearErrorFeedback() {
        $('div#id-errors').empty();
        $('div#id-errors').css('display', 'none');
        }

        function exampleErrorFeedback(errors) {
        var num_errors = errors.length;

        str = (num_errors === 1 ? "1 Error\n" : num_errors + " Errors\n");

        $('div#id-errors').css('display', 'block');

        $('div#id-errors').append('&lt;h2>&lt;a id="id-errors-start">&lt;/a>' + str + '&lt;/h2>');

        var messages = "&lt;ol>\n";

          for (var i = 0; i &lt; num_errors; i++) {
          var e = errors[i];
          messages += '&lt;li>&lt;a href="#' + e.id + '" onclick="moveFocus(\'' + e.id + '\')">' + e.message + '&lt;/a>&lt;/li>\n';
          }
          messages += "&lt;/ol>\n";
          $('div#id-errors').append(messages);

          moveFocus("id-errors-start");
          }

        //
        // Scripting for inline form validation

        function checkItem(id, flag, message) {
        var em = $('#' + id + '-error');
        $(em).empty();
        var ei = $('#' + id);

        if (flag) {
        $(ei).attr('aria-invalid', 'true');
        $(em).append(message);
        $(em).removeClass('noerror');
        $(em).addClass('error');
        }
        else {
        $(ei).attr('aria-invalid', 'false');
        $(em).addClass('noerror');
        $(em).removeClass('error');
        }
        }

        function checkName() {
        var ei = $('#id-name');
        checkItem('id-name',($(ei).val().length === 0), "Name cannot be empty!  Enter your name");
        }

        function checkAddress() {
        var ei = $('#id-address');
        checkItem('id-address',($(ei).val().length === 0), "Address cannot be empty!  Enter your address");
        }

        function checkPhone() {
        var ei = $('#id-phone');
        var phone = $(ei).val();
        if (phone.length === 0) {
        checkItem('id-phone',true, "Phone cannot be empty!  Enter your phone number");
        }
        else {
        p = "";
        for (var i = 0; i &lt; phone.length; i++) {
        var c = phone[i];
        if ((c >= "0") &amp;&amp; (c &lt;= "9")) {
        p += c;
        }
        }
        checkItem('id-phone', ((p.length !== 7) &amp;&amp; (p.length !== 10)), "Not a valid phone number, use this format (111) 222-3333");
        }
        }

      </script>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'form');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>

    </contents>
  </slide>

  <slide>
    <title>Popup Error Example 5: Assistive Technology Support</title>
    <contents>

      <table class="survey table table-striped" aria-labelledby="h1_title">
        <thead>
          <tr>
            <th>Support</th>
            <th>Screen Reader</th>
            <th>Browser</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              EDGE
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              Firefox
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Edge
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Firefox
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              Voice Over High Sierra
            </td>
            <td>
              Safari 11.1
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              Voice Over High Sierra
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>

  <slide>
    <title>Popup Error Example 6: aria-label attribute used for error message</title>

    <script src="js/submit-order.js" type="text/javascript"></script>

    <style type="text/css">
      div {
      border: solid medium transparent;
      }

      div.focus {
      border-color: black;
      background-color: #FFFFA0;
      }

      div.hover {
      border-color: black;
      background-color: #EEEEEE;
      }


      input[type="text"]:focus,
      select:focus {
      background-color: #FFFFA0;
      outline: medium solid black;
      }

      input[type="text"]:hover,
      select:hover {
      background-color: #EEEEEE;
      outline: medium solid black;
      }


      div#id-errors {
      color: red;
      display: none;
      margin-left: 1em;
      border: thin solid red;
      width: 25em;
      }

      div#id-errors a {
      color: red;
      }

      h2, h3 {
      margin: 0;
      padding: 0;
      margin-top: 1em;
      }

      label {
      display: block;
      margin: 0;
      padding: 0;
      font-weight: normal;
      }

      fieldset,
      legend {
      padding: 0;
      margin: 0;
      margin-top: 1em;
      }

      legend {
      margin-top: 1em;
      font-weight: bold;
      font-size: 110%;
      }

      div.text,
      div.select,
      input[type="submit"] {
      margin-top: 0.5em;
      }


      label.error,
      lanel.noerror {
      display: inline;
      }

      label.error {
      color: red;
      border: thin solid red;
      padding: 0.25em;
      }

      label.noerror {
      color: transparent;
      border: thin solid transparent;
      padding: 0.25em;
      }

    </style>

    <contents>

      <h2>Features</h2>
      <ul>
        <li><code>label[for]</code> elements provide initial labels for form contorls.</li>
        <li><code>aria-label</code> attribute changes the label for a form control when it has an error.</li>
        <li>HTML5 <code>required</code> attribute to identify a form control is required.</li>
        <li><code>aria-invalid</code> attribute is used to identify a form control has an invalid value.</li>
        <li><code>role="status"</code> is used to autmatically announce errors in form controls.</li>
      </ul>

      <div role="region" aria-label="Example">

        <form id="form">
          <h2>Pizza Order Form</h2>

          <div class="text">
            <label for="id-name">Name</label>
            <input id="id-name"
              required="true"
              aria-invalid="false"
              type="text"
              size="30"
              onblur="checkName()"/>
            <label id="id-name-error" for="id-name" class="noerror" role="status"> </label>
          </div>

          <div class="text">
            <label for="id-address">Address</label>
            <input id="id-address"
              required="true"
              aria-invalid="false"
              type="text"
              size="40"
              onblur="checkAddress()"/>
            <label id="id-address-error" for="id-address" class="noerror" role="status"> </label>
          </div>

          <div class="text">
            <label for="id-phone">Phone</label>
            <input id="id-phone"
              required="true"
              aria-invalid="false"
              type="text"
              size="14"
              onblur="checkPhone()"/>
            <label id="id-phone-error" for="id-phone" class="noerror" role="status"> </label>
          </div>

          <div class="select">
            <label for="id-delivery">Delivery Method</label>
            <select id="id-delivery">
              <option>Eat in store</option>
              <option>Pickup</option>
              <option>Home delivery</option>
            </select>
          </div>

          <fieldset>
            <legend>Crust</legend>
            <div class="button">
              <label><input id="id-thin" name="crust" type="radio" value="Thin" required="true"/> Thin</label>
            </div>
            <div class="button">
              <label><input id="id-classic" name="crust" type="radio" value="Classic" required="true" /> Classic</label>
            </div>
            <div class="button">
              <label><input id="id-deep" name="crust" type="radio" value="Deep Dish" required="true" aria-labelledby="id-thin id-deep"/> Deep Dish</label>
            </div>
          </fieldset>

          <fieldset>
            <legend>Toppings</legend>
            <div class="button">
              <label>
                <input id="id-sausage"
                  name="topping"
                  type="checkbox"
                  value="Sausage"/>
                Sausage
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-pepperoni"
                  name="topping"
                  type="checkbox"
                  value="Pepperoni"/>
                Pepperoni
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-mushrooms"
                  name="topping"
                  type="checkbox"
                  value="Mushrooms"/>
                Mushrooms
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-onions"
                  name="topping"
                  type="checkbox"
                  value="Onions"/>
                Onions
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-green"
                  name="topping"
                  type="checkbox"
                  value="Green Peppers"/>
                Green Peppers
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-black"
                  name="topping"
                  type="checkbox"
                  value="Black Olives"/>
                Back Olives
              </label>
            </div>
            <div class="button">
              <label>
                <input id="id-x-cheese"
                  name="topping"
                  type="checkbox"
                  value="Extra Cheese"
                  aria-labelledby="id-x-cheese id-toppings"/>
                Extra cheese
              </label>
            </div>
          </fieldset>

          <input type="submit" value="Submit Order" onclick="submitOrder(event)"/>

        </form>

        <div id="order">

        </div>

      </div>

      <script id="script" type="text/javascript">

        // Focus styling code

        $(document).ready( function() {

        $('input[type="radio"]').focus(function() {
        $(this).parent().addClass('focus');
        });

        $('input[type="radio"]').blur(function() {
        $(this).parent().removeClass('focus');
        });

        $('input[type="radio"]').parent().hover(function() {
        $(this).addClass('hover');
        },
        function() {
        $(this).removeClass('hover');
        });


        $('input[type="checkbox"]').focus(function() {
        $(this).parent().addClass('focus');
        });

        $('input[type="checkbox"]').blur(function() {
        $(this).parent().removeClass('focus');
        });

        $('input[type="checkbox"]').parent().hover(function() {
        $(this).addClass('hover');
        },
        function() {
        $(this).removeClass('hover');
        });


        });

        //
        // Scripting for submit button form validation

        function moveFocus(id) {
        $('#'+id).focus();
        }

        function clearErrorFeedback() {
        $('div#id-errors').empty();
        $('div#id-errors').css('display', 'none');
        }

        function exampleErrorFeedback(errors) {
        var num_errors = errors.length;

        str = (num_errors === 1 ? "1 Error\n" : num_errors + " Errors\n");

        $('div#id-errors').css('display', 'block');

        $('div#id-errors').append('&lt;h2>&lt;a id="id-errors-start">&lt;/a>' + str + '&lt;/h2>');

        var messages = "&lt;ol>\n";

          for (var i = 0; i &lt; num_errors; i++) {
          var e = errors[i];
          messages += '&lt;li>&lt;a href="#' + e.id + '" onclick="moveFocus(\'' + e.id + '\')">' + e.message + '&lt;/a>&lt;/li>\n';
          }
          messages += "&lt;/ol>\n";
          $('div#id-errors').append(messages);

          moveFocus("id-errors-start");
          }

        //
        // Scripting for inline form validation

        function checkItem(id, flag, message) {
        var em = $('#' + id + '-error');
        $(em).empty();
        var ei = $('#' + id);

        if (flag) {
        $(ei).attr('aria-invalid', 'true');
        $(ei).attr('aria-label', message);
        $(em).append(message);
        $(em).removeClass('noerror');
        $(em).addClass('error');
        }
        else {
        $(ei).attr('aria-invalid', 'false');
        $(ei).removeAttr('aria-label');
        $(em).addClass('noerror');
        $(em).removeClass('error');
        }
        }

        function checkName() {
        var ei = $('#id-name');
        checkItem('id-name',($(ei).val().length === 0), "Name cannot be empty!  Enter your name");
        }

        function checkAddress() {
        var ei = $('#id-address');
        checkItem('id-address',($(ei).val().length === 0), "Address cannot be empty!  Enter your address");
        }

        function checkPhone() {
        var ei = $('#id-phone');
        var phone = $(ei).val();
        if (phone.length === 0) {
        checkItem('id-phone',true, "Phone cannot be empty!  Enter your phone number");
        }
        else {
        p = "";
        for (var i = 0; i &lt; phone.length; i++) {
        var c = phone[i];
        if ((c >= "0") &amp;&amp; (c &lt;= "9")) {
        p += c;
        }
        }
        checkItem('id-phone', ((p.length !== 7) &amp;&amp; (p.length !== 10)), "Not a valid phone number, use this format (111) 222-3333");
        }
        }

      </script>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'form');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
  </slide>

  <slide>
    <title>Popup Error Example 6: Assistive Technology Support</title>
    <contents>

      <table class="survey table table-striped" aria-labelledby="h1_title">
        <thead>
          <tr>
            <th>Support</th>
            <th>Screen Reader</th>
            <th>Browser</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              EDGE
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              JAWS 2018
            </td>
            <td>
              Firefox
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Edge
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              NVDA 2018.1.1
            </td>
            <td>
              Firefox
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              Voice Over High Sierra
            </td>
            <td>
              Safari 11.1
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td class="yes">Yes</td>
            <td>
              Voice Over High Sierra
            </td>
            <td>
              Chrome
            </td>
            <td>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>

  <slide>
    <title>Popup Error: Assistive Technology Support Summary</title>
    <contents>

      <table class="survey table table-striped" aria-labelledby="h1_title">
        <thead>
          <tr>
            <th>Example</th>
            <th>Best Practice</th>
            <th>Supported</th>
            <th>Not Supported</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>
              1) no reference to error message
            </td>
            <td>
            </td>
            <td>
            </td>
            <td>
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td>
              2) <code>label[for]</code> references error message
            </td>
            <td>
            </td>
            <td>
            </td>
            <td>
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td>
              3) <code>aria-describedby</code> attribute reference to error message
            </td>
            <td>
            </td>
            <td>
            </td>
            <td>
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td>
              4) <code>title</code> attribute reference to error message
            </td>
            <td>
            </td>
            <td>
            </td>
            <td>
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td>
              5) <code>aria-labelledby</code> attribute reference to error message
            </td>
            <td>
            </td>
            <td>
            </td>
            <td>
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td>
              6) <code>aria-label</code> attribute reference to error message
            </td>
            <td>
            </td>
            <td>
            </td>
            <td>
            </td>
            <td>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>

  <slide>
    <title>Design Pattern: Image Carousel</title>
    <contents>
      <ul>
        <li><a href="http://will.illinois.edu">Will Radio and TV: Carousel Image Rotator (Not Accessible)</a></li>
        <li><a href="http://citl.illinois.edu">Center for Innovate Teaching and Learning: Carousel Image Rotator (Accessible)</a></li>
        <li><a href="http://jongund.github.io/aria-examples/bootstrap-carousel/" target="_example">Carousel Issues and Bootstrap.js Solution</a></li>
      </ul>
      <h2>Questions</h2>
      <ul>
        <li>How to you decide what to call this widget?</li>
        <li>What is the keyboard interaction?</li>
      </ul>
      <iframe src="http://jongund.github.io/aria-examples/bootstrap-carousel/"
              title="ARIA Carousel Example"
              width="98%"
              height="600px"/>
      </contents>
  </slide>

  <slide>
    <title>The Need for ARIA Authoring Practices</title>
    <contents>
      <ul>
        <li>ARIA is often confusing to developers and designers.</li>
        <li>Improperly used ARIA markup can make web resources less accessible and break interoperability.</li>
        <li>ARIA examples and usage in actual websites are incomplete or incorrectly use ARIA markup adding to confusion.</li>
        <li>Lack of awareness of keyboard interaction support needed to make ARIA work properly.</li>
      </ul>
    </contents>
  </slide>

   <slide>
    <title>ARIA Authoring Practices</title>
    <contents>
      <ul>
        <li>Section 2: Design Patterns and Widgets</li>
        <li>Section 3: Landmark Regions</li>
        <li>Section 4: Developing a Keyboard Interface</li>
        <li>Section 6. Intentionally Hiding Semantics with the presentation Role</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Section 2: Design Patterns and Widgets</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#aria_ex">ARIA Authoring Practices: Design Patterns and Widgets</a></li>
        <li>Desciption of widget.</li>
        <li>Keyboard interaction requirements and options.</li>
        <li>Uses of ARIA roles, properties and states.</li>
        <li>Examples</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#aria_ex" width="98%" height="600px"></iframe>
    </contents>
  </slide>

  <slide>
    <title>Section 3: Landmark Regions</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#aria_landmark">ARIA Authoring Practices: Landmark Regions</a>.</li>
        <li>How to think about landmarks.</li>
        <li>Types of landmarks and their uses.</li>
        <li>HTML5 elements that define landmarks.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#aria_landmark" width="98%" height="600px"></iframe>
    </contents>
  </slide>

  <slide>
    <title>Landmarks Example</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/examples/landmarks/">ARIA Authoring Practices Landmark Example</a></li>
        <li>Uses landmark in design.</li>
        <li>Landmark visualization feature.</li>
        <li>Links to related resources.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/examples/landmarks/" width="98%" height="600px"></iframe>
    </contents>
  </slide>

  <slide>
    <title>Section 4: Developing a Keyboard Inteface</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard">ARIA Authoring Practices: Developing a Keyboard Interface</a></li>
        <li>This is often the least understood part of using ARIA technology.</li>
        <li>What is the keyboard interaciotn model and which ARIA widget roles are compatible with that model.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard" width="98%" height="600px"></iframe>
    </contents>
  </slide>

  <slide>
    <title>Section 4.1: Fundamental Keyboard Navigation Conventions</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_generalnav">ARIA Authoring Practices: Fundamental Keyboard Navigation Conventions</a></li>
        <li>Keyboard interaction model for each widget role.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_generalnav" width="98%" height="600px"></iframe>
    </contents>
  </slide>

  <slide>
    <title>Section 4.2: Discernable and Predictable Keyboard Focus</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_focus_discernable_predictable">ARIA Authoring Practices: Discernable and Predictable Keyboard Focus</a></li>
        <li>Many users with disabilities can see the display, but need to idenfity the elements with keyboard focus and/or selections.</li>
        <li>Keyboard interaction is often difficult or impossible if users cannot identify what element has keyboard focus.</li>
        <li>Need more than just color, so the use of borders, underline or visual icons is important.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_focus_discernable_predictable" width="98%" height="600px"></iframe>
    </contents>
  </slide>

  <slide>
    <title>Section 4.3: Focus vs. Selection and the Perception of Dual Focus</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_focus_vs_selection">ARIA Authoring Practices: Focus vs. Selection and the Perception of Dual Focus</a></li>
        <li>Making the styling of keyboard focus and selection different is important.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_focus_vs_selection" width="98%" height="600px"></iframe>
    </contents>
  </slide>

  <slide>
    <title>Section 4.4: Deciding When to Make Selection Automatically Follow Focus</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_selection_follows_focus">ARIA Authoring Practices: Deciding When to Make Selection Automatically Follow Focus</a></li>
        <li>When content is loaded basd on user interaction there can sometimes be delays in content being available, make sure the affects of these delays are minimized for keyboard users.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_selection_follows_focus" width="98%" height="600px"></iframe>
    </contents>
  </slide>


  <slide>
    <title>Section 4.5: Keyboard Navigation Between Components (The Tab Sequence)</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_general_between">ARIA Authoring Practices: Keyboard Navigation Between Components (The Tab Sequence)</a></li>
        <li>The use of <code>tabindex=-1</code> and <code>tabindex=0</code> to define interactive elements and tab order of content of the page.</li>
        <li><code>tabindex</code> values > 0 are discouraged, and should only be used cautiously.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_general_between" width="98%" height="600px"></iframe>
    </contents>
  </slide>


  <slide>
    <title>Section 4.6: Keyboard Navigation Inside Components</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_general_within">ARIA Authoring Practices: Keyboard Navigation Inside Components</a></li>
        <li>Roving <code>tabindex</code> versus <code>aria-activedescendant</code> technique for identifying element with current focus.</li>
        <li>Call <code>focus()</code> on elements with focus.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_general_within" width="98%" height="600px"></iframe>
    </contents>
  </slide>

  <slide>
    <title>Section 4.7: Focusability of Disabled Controls</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_disabled_controls">ARIA Authoring Practices: Focusability of disabled controls</a></li>
        <li>When to keep or remove keyboard interaction to disabled controls.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_disabled_controls" width="98%" height="600px"></iframe>
    </contents>
  </slide>

  <slide>
    <title>Section 4.8: Keyboard Shortcuts</title>
    <contents>
      <ul style="margin-bottom: 2em">
        <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_shortcuts">ARIA Authoring Practices: Keyboard Shortcuts</a></li>
        <li>Understanding how keyboard shortcuts augment a keyboard interface and whether to make a particular shortcut move focus, perform a function, or both.</li>
        <li>Making key assignments and avoiding assignment conflicts with assistive technologies, browsers, and operating systems.</li>
        <li>Exposing and documenting key assignments.</li>
      </ul>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_shortcuts" width="98%" height="600px"></iframe>
    </contents>
  </slide>

  <slide>p
    <title>Section 6: Intentionally Hiding Semantics with the Presentation Role</title>
    <contents>
      <p><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#presentation_role">Section 6: Intentionally Hiding Semantics with the presentation Role </a></p>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#presentation_role" width="98%" height="600px"></iframe>
    </contents>
  </slide>

  <slide>
    <title>Section 7. Roles That Automatically Hide Semantics by Making Their Descendants Presentational</title>
    <contents>
      <p><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#children_presentational">Section 7. Roles That Automatically Hide Semantics by Making Their Descendants Presentational</a></p>
      <iframe src="https://www.w3.org/TR/wai-aria-practices-1.1/#children_presentational" width="98%" height="600px"></iframe>
    </contents>
  </slide>

  <slide>
    <title>Next Steps for ARIA Authoring Practices Guide</title>
    <contents>
      <ul>
        <li>Additional widget descriptions and examples</li>
        <li>Grid and Table Examples</li>
        <li>Accessible visual state and synchronization with ARIA states techniques</li>
        <li>Form error feedback</li>
        <li>Index of examples</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Open Source Tools</title>
    <contents>
      <ul>
        <li><a href="https://addons.mozilla.org/en-US/firefox/addon/ainspector-sidebar/">AInspector Sidebar for Firefox</a></li>
        <li><a href="https://fae.disability.illinois.edu">Functional Accessibility Evaluator 2.0</a></li>
        <li><a href="https://accessibility-bookmarklets.org/">Public Bookmarklets Website</a></li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Functional Accessibility Evaluator (FAE) 2.0</title>
    <contents>
      <ul>
        <li>Two versions of Functional Accessibility Evaluator 2.0
          <ul>
            <li><a href="https://fae.disability.illinois.edu">FAE 2.0 Indidvidual License Version</a></li>
            <li><a href="https://fae.illinois.edu">FAE 2.0 Institutional License Version</a> using <a href="https://www.incommon.org/">InCommon</a></li>
          </ul>
        </li>
        <li>Designed for:
          <ul>
            <li>Managers</li>
            <li>Web designers</li>
            <li>Software developers</li>
            <li>Quality assurance testers</li>
            <li>IT Auditors</li>
          </ul>
        </li>
        <li>Website rule result summaries and implementation status</li>
        <li>Page rule result summaries</li>
        <li>Organizes rules by Rule Categories, Rule Scope and WCAG Guidelines</li>
        <li>Archive and share reports</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>AInspector Sidebar for Firefox</title>
    <contents>
      <ul>
        <li><a href="http://ainspector.github.io">http://ainspector.github.io</a></li>
        <li>Designed for:
          <ul>
            <li>Web designers</li>
            <li>Software developers</li>
            <li>Quality assurance testers</li>
          </ul>
        </li>
        <li>Summary Rule Results
          <ul>
            <li>Rule Categories</li>
            <li>WCAG 2.0 Guideline Summary</li>
          </ul>
        </li>
        <li>Analyzes the browser DOM content</li>
        <li>Highlighting elements</li>
        <li>DOM inspector</li>
      </ul>

    </contents>
  </slide>

  <slide>
    <title>Bookmarklets for Visualizing Accessibility Features</title>
    <contents>
      <ul>
        <li><a href="https://accessibility-bookmarklets.org/">Public Bookmarklets Website</a></li>
        <li>Features:
          <ul>
            <li>Highlight Regions and Elements on page</li>
            <li>Element information</li>
            <li>Default or defined <code>role</code></li>
            <li>Accessible name</li>
            <li>Accessible description</li>
            <li>Important prorperties (e.g the number of items in a list)</li>
          </ul>
        </li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Questions and Discussion</title>
    <contents>
      <h2>Badge Requirements</h2>
      <ul>
        <li>Passing quiz with 90% correct (available tomorrow through Blackboard)</li>
        <li>Completing and submitting the checkbox
          example</li>
      </ul>
      <h2>Discussion Lists</h2>
      <ul>
        <li><a href="https://www.educause.edu/discuss/it-accessibility-constituent-group">Educause IT Accessibility Constituent Group</a></li>
        <li><a href="https://www.w3.org/WAI/IG/">W3C Web Accessibility Initiative (WAI) Interest Group</a></li>
        <li><a href="http://webaim.org">WebAIM</a></li>
      </ul>
    </contents>
  </slide>

</slides>


