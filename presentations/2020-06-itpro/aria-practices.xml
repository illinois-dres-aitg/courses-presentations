<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="funct.css" type="text/css"?>
<?xm-well_formed path="funct.dtd"?>
<slides>
 <lang>en</lang>
  <title>W3C ARIA Authoring Practices 1.2 for Developers and Evaluators</title>
  <person>
    <name>Mark McCarthy, CPWA</name>
    <desc>Quality Assurance Accessibility Engineer</desc>
    <desc>Administrative Information Technology Services</desc>
    <desc href="mailto:mcmccar2@uillinois.edu">mcmccar2@uillinois.edu</desc>
  </person>
  <person>
    <name>Jon Gunderson, Ph.D., CPWA</name>
    <desc>Coordinator of Accessible IT Group</desc>
    <desc>Division of Disability Resources and Educational Services</desc>
    <desc href="mailto:jongund@illinois.edu">jongund@illinois.edu</desc>
  </person>

  <conference>
    <name href="https://www.itproforum.illinois.edu/">Illinois: Spring IT Pro Forum</name>
    <desc>Online</desc>
    <desc>June 4th, 2020</desc>
  </conference>

  <desc href="../">Presentations</desc>

  <stylesheet media="screen">../../common/css/bootstrap.min.css</stylesheet>
  <stylesheet media="screen">../../common/css/bootstrap-theme.min.css</stylesheet>
  <stylesheet media="screen">../../common/css/bootstrap-accessibility.css</stylesheet>

  <stylesheet media="screen">../../common/css/xml-slides.css</stylesheet>

  <script>../../common/js/jquery-2.1.1.min.js</script>
  <script>../../common/js/bootstrap.min.js</script>
  <script>../../common/js/bootstrap-accessibility.min.js</script>
  <script>../../common/js/xml-slides.js</script>

  <slide>
    <title>Overview</title>
    <contents>
      <ul>
        <li>Purpose of ARIA</li>
        <li>Goals of ARIA 1.2 release</li>
        <li>ARIA Authoring Practices</li>
        <li>ARIA Assistive Technology Project</li>
      </ul>
      <script type="text/javascript">
        slideShowURL()
      </script>
    </contents>
  </slide>

  <slide>
    <title>Describing Semantics and Behavior</title>
    <contents>
     <p>Provide an inter-operable way to describe the features of <em>custom widgets</em>:</p>
     <ul>
       <li><strong>Role:</strong> Describes the type of widget, which implies the <em>keyboard interaction</em>.</li>
       <li><strong>Properties and States:</strong> Describing features like "expandable", "checked" or "selected".</li>
       <li><strong>Language independence:</strong> Roles, properties and states can be translated by the operating systems and assistive technologies to local languages.</li>
       <li><strong>Labeling:</strong> Giving a widget and its components names to understand their purpose.</li>
       <li><strong>Relationships:</strong> How different components relate to each other (e.g. descriptions, controls, owns).</li>
       <li><strong>Grouping:</strong> Groups of related components (e.g. lists, menus, trees, tab panels).</li>
     </ul>
    </contents>
  </slide>

  <slide>
    <title>Standardize Information Provided to Accessibility APIs</title>
    <contents>
      <p>Define how browsers represent HTML markup to the following accessibility APIs:</p>
        <ul>
          <li>ATK/AT-SPI (Linux/Unix)</li>
          <li>Microsoft Active Accessibility (MSAA) + IAccessible2</li>
          <li>Microsoft UI Automate</li>
          <li>MacOS Accessibility API</li>
        </ul>
    </contents>
  </slide>


  <slide>
    <title>ARIA Contract with Browsers and Assistive Technologies</title>
    <contents>
      <h2>Browsers</h2>
      <ul>
        <li>The use of ARIA markup does not affect browser behavior or rendering.</li>
        <li>ARIA only affects how information is represented in accessibility APIs (e.g. MSAA+IAccessible2, ATK+SPI, UIAutomate, MacOS).</li>
      </ul>

      <h2>Assistive Technologies</h2>
      <ul>
        <li>Do not specify what assistive technologies will do with the information.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Accessible Name Calculation</title>
    <contents>
        <ul>
          <li><a href="https://w3c.github.io/aria-practices/#names_and_descriptions">Section 5: Providing Accessible Names and Descriptions</a></li>
          <li>In general only <strong>one</strong> technique should be used to define an accessible name, if more than one technique is used the following priority is used for the calculation.</li>
        </ul>
        <h2 id="heading_ant">Accessible Name Techniques</h2>
        <table class="table table-striped table-hover" aria-labelledby="heading_ant">
          <thead>
            <tr>
              <th>Priority</th>
              <th>Technique</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td><code>aria-labelledby</code></td>
              <td>
                <ul>
                  <li>The <code>aria-labelledby</code> attribute contains a list of <code>IDREF</code>s to elements on the page.</li>
                  <li>Text content of referenced elements are concatenated to compute the accessible name.</li>
                  <li>References typically identify visible text on the screen in visual proximity to the control.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>2</td>
              <td><code>aria-label</code></td>
              <td>
                <ul>
                  <li>The <code>aria-label</code> attribute text content defines the accessible name.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>3</td>
              <td>The <code>legend</code> element for grouping roles<br/><span class="new">Proposed, maybe in ARIA 1.2</span></td>
              <td>
                  Allows the use of the HTML <code>legend</code> element to define the accessible name for the <code>group</code> and <code>radiogroup</code> roles.
              </td>
            </tr>
            <tr>
              <td>4</td>
              <td>text content</td>
              <td>
                <ul>
                  <li>Some ARIA widget roles allow the text content of the container element to define an accessible name (e.g. <code>role="checkbox"</code>).</li>
                  <li>Text content includes text alternatives, for example <code>alt</code> attribute content of an <code>img</code> element.</li>
                  <li>Text content includes text from generated CSS, for example when the <code>content</code> property is used.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>5</td>
              <td><code>title</code></td>
              <td>
                <ul>
                  <li>If no other source of an accessible name is found and the element has a <code>title</code> attribute, the content of the <code>title</code> attribute will used to define the accessible name.</li>
                </ul>
              </td>
            </tr>
          </tbody>
        </table>
    </contents>
  </slide>

  <slide>
    <title>Accessible Description Calculation</title>
    <contents>
        <ul>
          <li><a href="https://w3c.github.io/aria-practices/#names_and_descriptions">Section 5: Providing Accessible Names and Descriptions</a></li>
          <li>Accessible description provides more information about a form control, link or ARIA widget.</li>
          <li>Screen readers each have their own ways of rendering and sometimes ignoring the <em>description information</em> information.</li>
        </ul>
        <h2 id="heading_ant">Accessible Description Techniques</h2>
        <table class="table table-striped table-hover" aria-labelledby="heading_ant">
          <thead>
            <tr>
              <th>Priority</th>
              <th>Technique</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td><code>aria-describedby</code></td>
              <td>
                <ul>
                  <li>The <code>aria-describedby</code> attribute contains a list of <code>IDREF</code>s to elements on the page.</li>
                  <li>Text content of referenced elements are concatenated to compute the <em>accessible description</em>.</li>
                  <li>Designed to reference visible text on the screen, like instructions and error feedback.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>2</td>
              <td><code>aria-description</code><br/><span class="new">Proposed, probably in ARIA 1.2</span></td>
              <td>
                Similar to <code>aria-label</code> attribute, text content is used to define an accessible description.
              </td>
            </tr>
            <tr>
              <td>3</td>
              <td><code>title</code></td>
              <td>
                <ul>
                  <li>If no other source of an <em>accessible description</em> is found and the element has a <code>title</code> attribute that is <strong>not</strong> being used to define an accessible name, the content of the <code>title</code> attribute is used to define the <em>accessible description</em>.</li>
                </ul>
              </td>
            </tr>
          </tbody>
        </table>
    </contents>
  </slide>

  <slide>
    <title>New features in ARIA 1.2</title>
    <contents>
      <p><a href="https://w3c.github.io/aria/">Editors Draft of ARIA 1.2 Specification</a></p>
      <ul>
        <li>HTML harmonization</li>
        <li>Combobox design pattern 1.2 that works with assistive technologies.</li>
        <li>Accessible Object Model (AOM) to reflect some ARIA properties.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>HTML harmonization</title>
    <contents>
      <ul>
        <li>Define roles appropriate for every HTML element.</li>
        <li>Allows assignment of default <a href="https://www.w3.org/TR/html-aria/" target="_spec">ARIA role mappings to every HTML element</a>.</li>
        <li>Some new roles, like <code>generic</code> role for elements with no semantics like <code>div</code> and <code>span</code>, should not be used by developers.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>ARIA 1.2 Combobox Design Pattern</title>
    <contents>
      <ul>
        <li><code>combobox</code> role is on the <code>input</code> element.</li>
        <li><code>aria-expanded</code> attribute is on the <code>input</code> element.</li>
        <li><code>aria-haspopup</code> attribute is on the <code>input</code> element.</li>
        <li><code>aria-controls</code> references the popup widget (e.g. listbox, grid or tree).</li>
      </ul>

      <h2>Legacy Combobox Patterns</h2>
      <p>ARIA 1.2 pattern is similar to the ARIA 1.0 combobox pattern, but instead of using <code>aria-owns</code> uses <code>aria-controls</code> to reference associated popup widget and has good AT support.  ARIA 1.1 pattern was never supported by assistive technologies and used a container model of having the <code>input</code> element and popup widget as  descendants of an element with the role <code>combobox</code>.  The 1.1 pattern change was made to support of UIAutomation model of a combobox.</p>
    </contents>
  </slide>

    <slide>
    <title>Accessible Object Model (AOM)</title>
    <contents>

        <p>In addition to using in-line HTML code and the <code>setAttribute</code> and <code>getAttribute</code> DOM methods for setting ARIA roles, properties and states, new DOM properties will also be available.</p>

        <h2>Setting Role Attribute</h2>

        <p><code>element.role="tablist";</code></p>

        <h2>Setting ARIA Attributes</h2>

        <p>Use camel case naming convention for property name.</p>

        <p><code>element.ariaLabel="Name";</code></p>
        <p><code>element.ariaChecked="true";</code></p>

        <h2>Getting ARIA Attributes</h2>

        <p><code>var role = element.role;</code></p>
        <p><code>var label = element.ariaLabel;</code></p>
        <p><code>var checked = element.ariaChecked;</code></p>

        <p>NOTE: The role or aria-label must be defined in-line or programmatically to return value.</p>

        <h2>Gotchas</h2>
        <ul>
          <li>Only values that have been set in-line or programmatically can be read using the <code>.role</code> or <code>.aria-*</code> DOM property.</li>
          <li>Not all ARIA properties will be implemented, notably ARIA properties related to <code>ID</code> references, like <code>aria-labelledby</code>, <code>aria-controls</code>, etc..., since the HTML specification is still defining how properties using <code>ID</code> references will be implemented in the DOM.</li>
          <li>Still determining whether string versus boolean values will be returned for some states with boolean values.</li>
        </ul>
    </contents>
  </slide>

   <slide>
    <title>Combobox Design Pattern and Examples</title>
    <contents>
      <p><a href="https://w3c.github.io/aria-practices/#combobox">Editors Draft of Combobox Design Pattern</a></p>
      <ul>
        <li>Keyboard interaction.</li>
        <li>Proper use of ARIA roles.</li>
        <li>Proper use of ARIA properties and states.</li>
        <li>Examples:
          <ul>
            <li><a href="https://w3c.github.io/aria-practices/examples/combobox/combobox-autocomplete-both.html"  target="_example">Combobox with auto-complete</a></li>
            <li><a href="https://raw.githack.com/w3c/aria-practices/issue34-add-combobox-datepicker/examples/combobox/combobox-datepicker.html" target="_example">Date picker combobox</a> (Note: link is currently to a pull request)</li>
            <li>Newer examples support high contrast modes on Windows 10 and macOS.</li>
            <li><a href="">Regression tests for quality assurance</a> and can be used as models for in-house regression testing.</li>
          </ul>
        </li>
      </ul>
    </contents>
  </slide>

   <slide>
    <title>W3C ARIA Assistive Technology Project Community Group</title>
    <contents>
      <ul>
        <li><a href="https://www.w3.org/community/aria-at/" target="_group">ARIA-AT Community group website</a>, looking for participation.</li>
        <li><a href="https://aria-at.w3.org" target="_group">ARIA-AT group test harness</a> and test cases for:
          <ul>
            <li>Checkboxes</li>
            <li>Menubar</li>
          </ul>
        </li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Questions and Discussion</title>
    <contents>
    </contents>
  </slide>

</slides>


