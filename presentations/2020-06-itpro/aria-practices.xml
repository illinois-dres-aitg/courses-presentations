<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="funct.css" type="text/css"?>
<?xm-well_formed path="funct.dtd"?>
<slides>
 <lang>en</lang>
  <title>W3C ARIA Authoring Practices 1.2 for Developers and Evaluators</title>
  <person>
    <name>Mark McCarthy, M.S., CPWA</name>
    <desc>Quality Assurance Accessibility Engineer</desc>
    <desc>Administrative Information Technology Services</desc>
    <desc href="mailto:mcmccar2@uillinois.edu">mcmccar2@uillinois.edu</desc>
  </person>
  <person>
    <name>Jon Gunderson, Ph.D., CPWA</name>
    <desc>Coordinator of Accessible IT Group</desc>
    <desc>Division of Disability Resources and Educational Services</desc>
    <desc href="mailto:jongund@illinois.edu">jongund@illinois.edu</desc>
  </person>

  <conference>
    <name href="https://www.itproforum.illinois.edu/">Illinois: Spring IT Pro Forum</name>
    <desc>Online</desc>
    <desc>June 4th, 2020</desc>
  </conference>

  <desc href="../">Presentations</desc>

  <stylesheet media="screen">../../common/css/bootstrap.min.css</stylesheet>
  <stylesheet media="screen">../../common/css/bootstrap-theme.min.css</stylesheet>
  <stylesheet media="screen">../../common/css/bootstrap-accessibility.css</stylesheet>

  <stylesheet media="screen">../../common/css/xml-slides.css</stylesheet>

  <script>../../common/js/jquery-2.1.1.min.js</script>
  <script>../../common/js/bootstrap.min.js</script>
  <script>../../common/js/bootstrap-accessibility.min.js</script>
  <script>../../common/js/xml-slides.js</script>

  <slide>
    <title>Overview</title>
    <contents>
      <ul>
        <li>Purpose of ARIA</li>
        <li>Goals of ARIA 1.2 release</li>
        <li>ARIA Authoring Practices</li>
        <li>ARIA Assistive Technology Project</li>
      </ul>
      <script type="text/javascript">
        slideShowURL()
      </script>
    </contents>
  </slide>

  <slide>
    <title>Describing Semantics and Behavior</title>
    <contents>
     <p>Provide an inter-operable way to describe the features of <em>custom widgets</em>:</p>
     <ul>
       <li><strong>Role:</strong> Describes the type of widget, which implies the <em>keyboard interaction</em>.</li>
       <li><strong>Properties and States:</strong> Describing features like "expandable", "checked" or "selected".</li>
       <li><strong>Language independence:</strong> Roles, properties and states can be translated by the operating systems and assistive technologies to local languages.</li>
       <li><strong>Labeling:</strong> Giving a widget and its components names to understand their purpose.</li>
       <li><strong>Relationships:</strong> How different components relate to each other (e.g. descriptions, controls, owns).</li>
       <li><strong>Grouping:</strong> Groups of related components (e.g. lists, menus, trees, tab panels).</li>
     </ul>
    </contents>
  </slide>

  <slide>
    <title>Standardize Information Provided to Accessibility APIs</title>
    <contents>
      <p>Define how browsers represent HTML markup to the following accessibility APIs:</p>
        <ul>
          <li>ATK/AT-SPI (Linux/Unix)</li>
          <li>Microsoft Active Accessibility (MSAA) + IAccessible2</li>
          <li>Microsoft UI Automate</li>
          <li>MacOS Accessibility API</li>
        </ul>
    </contents>
  </slide>


  <slide>
    <title>ARIA Contract with Browsers and Assistive Technologies</title>
    <contents>
      <h2>Browsers</h2>
      <ul>
        <li>The use of ARIA markup does not affect browser behavior or rendering.</li>
        <li>ARIA only affects how information is represented in accessibility APIs (e.g. MSAA+IAccessible2, ATK+SPI, UIAutomate, MacOS).</li>
      </ul>

      <h2>Assistive Technologies</h2>
      <ul>
        <li>Do not specify what assistive technologies will do with the information.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Accessible Name Calculation</title>
    <contents>
        <ul>
          <li><a href="https://w3c.github.io/aria-practices/#names_and_descriptions">Section 5: Providing Accessible Names and Descriptions</a></li>
          <li>In general only <strong>one</strong> technique should be used to define an accessible name, if more than one technique is used the following priority is used for the calculation.</li>
        </ul>
        <h2 id="heading_ant">Accessible Name Techniques</h2>
        <table class="table table-striped table-hover" aria-labelledby="heading_ant">
          <thead>
            <tr>
              <th>Priority</th>
              <th>Technique</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td><code>aria-labelledby</code></td>
              <td>
                <ul>
                  <li>The <code>aria-labelledby</code> attribute contains a list of <code>IDREF</code>s to elements on the page.</li>
                  <li>Text content of referenced elements are concatenated to compute the accessible name.</li>
                  <li>References typically identify visible text on the screen in visual proximity to the control.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>2</td>
              <td><code>aria-label</code></td>
              <td>
                <ul>
                  <li>The <code>aria-label</code> attribute text content defines the accessible name.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>3</td>
              <td>text content</td>
              <td>
                <ul>
                  <li>Some ARIA widget roles allow the text content of the container element to define an accessible name (e.g. <code>role="checkbox"</code>).</li>
                  <li>Text content includes text alternatives, for example <code>alt</code> attribute content of an <code>img</code> element.</li>
                  <li>Text content includes text from generated CSS, for example when the <code>content</code> property is used.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>4</td>
              <td><code>title</code></td>
              <td>
                <ul>
                  <li>If no other source of an accessible name is found and the element has a <code>title</code> attribute, the content of the <code>title</code> attribute will used to define the accessible name.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td><span class="postponed">Postponed</span></td>
              <td><code>label</code> and <code>legend</code></td>
              <td>
                <code>label</code> encapsulation and <code>legend</code> naming techniques are in the current <a href="https://w3c.github.io/aria/#namecalculation" target="spec">ARIA 1.2 editors working draft</a> as naming techniques, but will be removed and may be in a future version of ARIA.
              </td>
            </tr>
          </tbody>
        </table>
    </contents>
  </slide>

  <slide>
    <title>Accessible Description Calculation</title>
    <contents>
        <ul>
          <li><a href="https://w3c.github.io/aria-practices/#names_and_descriptions">Section 5: Providing Accessible Names and Descriptions</a></li>
          <li>Accessible description provides more information about a form control, link or ARIA widget.</li>
          <li>Screen readers each have their own ways of rendering and sometimes ignoring the <em>description information</em> information.</li>
        </ul>
        <h2 id="heading_ant">Accessible Description Techniques</h2>
        <table class="table table-striped table-hover" aria-labelledby="heading_ant">
          <thead>
            <tr>
              <th>Priority</th>
              <th>Technique</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td><code>aria-describedby</code></td>
              <td>
                <ul>
                  <li>The <code>aria-describedby</code> attribute contains a list of <code>IDREF</code>s to elements on the page.</li>
                  <li>Text content of referenced elements are concatenated to compute the <em>accessible description</em>.</li>
                  <li>Designed to reference visible text on the screen, like instructions and error feedback.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>2</td>
              <td><code>title</code></td>
              <td>
                <ul>
                  <li>If no other source of an <em>accessible description</em> is found and the element has a <code>title</code> attribute that is <strong>not</strong> being used to define an accessible name, the content of the <code>title</code> attribute is used to define the <em>accessible description</em>.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td><span class="postponed">Postponed</span></td>
              <td><code>aria-description</code></td>
              <td>
                <ul>
                  <li>Similar to <code>aria-label</code> attribute, text content is used to define an accessible description.</li>
                  <li>The <code>aria-description</code> attribute is in the current <a href="https://w3c.github.io/aria/#aria-description" target="_spec">editors working draft for ARIA 1.2</a>, but will be removed and will most likely be included in ARIA 1.3.</li>
                </ul>
              </td>
            </tr>
          </tbody>
        </table>
    </contents>
  </slide>

  <slide>
    <title>New features in ARIA 1.2</title>
    <contents>
      <p><a href="https://w3c.github.io/aria/">Editors Draft of ARIA 1.2 Specification</a></p>
      <ul>
        <li>HTML harmonization</li>
        <li>Combobox design pattern 1.2 that works with assistive technologies.</li>
        <li>Accessible Object Model (AOM) to reflect some ARIA properties.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>HTML harmonization</title>
    <contents>
      <ul>
        <li>Define roles appropriate for every HTML element.</li>
        <li>Allows assignment of default <a href="https://www.w3.org/TR/html-aria/" target="_spec">ARIA role mappings to every HTML element</a>.</li>
        <li>Some new roles, like <code>generic</code> role for elements with no semantics like <code>div</code> and <code>span</code>, should not be used by developers.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>ARIA 1.2 Combobox Design Pattern</title>
    <contents>
      <ul>
        <li><code>combobox</code> role is on the <code>input</code> element.</li>
        <li><code>aria-expanded</code> attribute is on the <code>input</code> element.</li>
        <li><code>aria-haspopup</code> attribute is on the <code>input</code> element.</li>
        <li><code>aria-controls</code> references the popup widget (e.g. listbox, grid or tree).</li>
      </ul>

      <h2>Legacy Combobox Patterns</h2>
      <p>ARIA 1.2 pattern is similar to the ARIA 1.0 combobox pattern, but instead of using <code>aria-owns</code> uses <code>aria-controls</code> to reference associated popup widget and has good AT support.  ARIA 1.1 pattern was never supported by assistive technologies and used a container model of having the <code>input</code> element and popup widget as  descendants of an element with the role <code>combobox</code>.  The 1.1 pattern change was made to support of UIAutomation model of a combobox.</p>
    </contents>
  </slide>


  <slide>
    <title>Accessible Object Model (AOM): Setting Roles, Properties and States</title>
    <contents>

        <p>NOTE: SLides were updated after presentation to provide additional information on the AOM, including the addition of 3 new slides.</p>

        <p>In addition to using in-line HTML code and the <code>setAttribute</code> and <code>getAttribute</code> DOM methods for setting ARIA roles, properties and states, new DOM properties will also be available.</p>

        <table class="table table-striped">
          <caption>Setting ARIA Role</caption>
          <tbody>
            <tr>
              <th>Role</th>
              <td><code>tablist</code></td>
            </tr>
            <tr>
              <th>Inline</th>
              <td><code>&lt;div role="tablist"&gt;</code></td>
            </tr>
            <tr>
              <th>setAttribute</th>
              <td><code>e.setAttribute("role", "tablist");</code></td>
            </tr>
            <tr>
              <th>DOM Property (<span class="new">ARIA 1.2</span>)</th>
              <td><code>e.role = tablist";</code></td>
            </tr>
          </tbody>
        </table>

        <table class="table table-striped">
          <caption>Setting Accessible Name</caption>
          <tbody>
            <tr>
              <th>Attribute</th>
              <td><code>aria-label</code></td>
            </tr>
            <tr>
              <th>Inline</th>
              <td><code>&lt;div role="button" aria-label="Play"&gt;</code></td>
            </tr>
            <tr>
              <th>setAttribute</th>
              <td><code>e.setAttribute("aria-label", "play");</code></td>
            </tr>
            <tr>
              <th>DOM Property (<span class="new">ARIA 1.2</span>)</th>
              <td><code>e.ariaLabel = "Play";</code></td>
            </tr>
          </tbody>
        </table>

        <table class="table table-striped">
          <caption>Setting State</caption>
          <tbody>
            <tr>
              <th>Attribute</th>
              <td><code>aria-checked</code></td>
            </tr>
            <tr>
              <th>Inline</th>
              <td><code>&lt;div role="checkbox" aria-checked="mixed"&gt;</code></td>
            </tr>
            <tr>
              <th>setAttribute</th>
              <td><code>e.setAttribute("aria-checked", "mixed");</code></td>
            </tr>
            <tr>
              <th>DOM Property (<span class="new">ARIA 1.2</span>)</th>
              <td><code>e.ariaChecked = "mixed";</code></td>
            </tr>
          </tbody>
        </table>

        <p>NOTE: AOM is only available on the most recent browser releases.</p>

    </contents>
  </slide>

  <slide>
    <title>Accessible Object Model (AOM): Getting Values</title>
    <contents>
        <table class="table table-striped">
          <caption>Getting ARIA Role</caption>
          <tbody>
            <tr>
              <th>Attribute</th>
              <td><code>role</code></td>
            </tr>
            <tr>
              <th>getAttribute</th>
              <td><code>var role = e.getAttribute("role");</code></td>
            </tr>
            <tr>
              <th>DOM Property (<span class="new">ARIA 1.2</span>)</th>
              <td><code>var role = e.role;</code><sup>1</sup></td>
            </tr>
          </tbody>
        </table>

        <table class="table table-striped">
          <caption>Getting Accessible Name</caption>
          <tbody>
            <tr>
              <th>Attribute</th>
              <td><code>aria-label</code></td>
            </tr>
            <tr>
              <th>getAttribute</th>
              <td><code>var label = e.getAttribute("aria-label");</code></td>
            </tr>
            <tr>
              <th>DOM Property (<span class="new">ARIA 1.2</span>)</th>
              <td><code>var label = e.ariaLabel;</code><sup>1</sup></td>
            </tr>
          </tbody>
        </table>

        <table class="table table-striped">
          <caption>Getting State</caption>
          <tbody>
            <tr>
              <th>Attribute</th>
              <td><code>aria-checked</code></td>
            </tr>
            <tr>
              <th>setAttribute</th>
              <td><code>var value = e.getAttribute("aria-checked");</code></td>
            </tr>
            <tr>
              <th>DOM Property (<span class="new">ARIA 1.2</span>)</th>
              <td><code>var value = e.ariaChecked;</code><sup>1</sup></td>
            </tr>
          </tbody>
        </table>

        <p><sup>1</sup>NOTE: Currently must be set using the AOM DOM property to return a value reliably and as in setting only available on the most recent browser releases.</p>

    </contents>
  </slide>

  <slide>
    <title>Accessible Object Model (AOM): Test Page</title>
    <contents>


      <table class="table table-striped">
        <caption>Getting Role Value with DOM <code>role</code> property</caption>
        <thead>
          <tr>
            <th>Setting Code</th>
            <th>Role Value</th>
            <th>Type</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td class="sourcecode">&lt;input type="checkbox"/></td>
            <td id="aom-11-role"></td>
            <td id="aom-11-type"></td>
          </tr>
          <tr>
            <td class="sourcecode">&lt;div role="checkbox"></td>
            <td id="aom-12-role"></td>
            <td id="aom-12-type"></td>
          </tr>
          <tr>
            <td class="sourcecode">e.setAttribute('role', 'checkbox');</td>
            <td id="aom-13-role"></td>
            <td id="aom-13-type"></td>
          </tr>
          <tr>
            <td class="sourcecode">e.role = 'checkbox';</td>
            <td id="aom-14-role"></td>
            <td id="aom-14-type"></td>
          </tr>
        </tbody>
      </table>

      <table class="table table-striped">
        <caption>Getting value with DOM <code>ariaChecked</code> property</caption>
        <thead>
          <tr>
            <th>Setting Code</th>
            <th>Role Value</th>
            <th>Type</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td class="sourcecode">&lt;div role="checkbox"  aria-checked="true"></td>
            <td id="aom-22-checked"></td>
            <td id="aom-22-type"></td>
          </tr>
          <tr>
            <td class="sourcecode">e.setAttribute('aria-checked', 'true');</td>
            <td id="aom-23-checked"></td>
            <td id="aom-23-type"></td>
          </tr>
          <tr>
            <td class="sourcecode">e.ariaChecked = 'true';</td>
            <td id="aom-24-checked"></td>
            <td id="aom-24-type"></td>
          </tr>
          <tr>
            <td class="sourcecode">e.ariaChecked = true;</td>
            <td id="aom-25-checked"></td>
            <td id="aom-25-type"></td>
          </tr>
        </tbody>
      </table>

      <div hidden="">
        <div id="aom-11"><input type="checkbox"/></div>

        <script>
          var role = document.getElementById("aom-11").firstElementChild.role;
          document.getElementById("aom-11-role").textContent = role ? role : "";           document.getElementById("aom-11-type").textContent = typeof role;
        </script>

        <div id="aom-12"><div role="checkbox"></div></div>

        <script>
          role = document.getElementById("aom-12").firstElementChild.role;
          document.getElementById("aom-12-role").textContent = role ? role : "";           document.getElementById("aom-12-type").textContent = typeof role;
        </script>

        <div id="aom-13"><div></div></div>
        <div id="aom-13-code">e.setAttribute("role", "checkbox")</div>

        <script>
          document.getElementById("aom-13").firstElementChild.setAttribute("role", "checkbox");
          role = document.getElementById("aom-13").firstElementChild.role;
          document.getElementById("aom-13-role").textContent = role ? role : "";           document.getElementById("aom-13-type").textContent = typeof role;
        </script>

        <div id="aom-14"><div></div></div>
        <div id="aom-14-code">e.role="checkbox"</div>

        <script>
          document.getElementById("aom-14").firstElementChild.role = "checkbox";
          role = document.getElementById("aom-14").firstElementChild.role;
          document.getElementById("aom-14-role").textContent = role ? role : "";           document.getElementById("aom-14-type").textContent = typeof role;
        </script>

        <div id="aom-22"><div role="checkbox" aria-checked="true"></div></div>

        <script>
          var checked = document.getElementById("aom-22").firstElementChild.ariachecked;
          document.getElementById("aom-22-checked").textContent = checked ? checked : "";           document.getElementById("aom-22-type").textContent = typeof checked;
        </script>

        <div id="aom-23"><div></div></div>
        <div id="aom-23-code">e.setAttribute("aria-checked", "true");</div>

        <script>
          document.getElementById("aom-23").firstElementChild.setAttribute("aria-checked", "true");
          checked = document.getElementById("aom-23").firstElementChild.ariaChecked;
          document.getElementById("aom-23-checked").textContent = checked ? checked : "";           document.getElementById("aom-23-type").textContent = typeof checked;
        </script>

        <div id="aom-24"><div></div></div>
        <div id="aom-24-code">e.ariaRequired="true";</div>

        <script>
          document.getElementById("aom-24").firstElementChild.ariaRequired = "true";
          checked = document.getElementById("aom-24").firstElementChild.ariaRequired;
          document.getElementById("aom-24-checked").textContent = checked ? checked : "";           document.getElementById("aom-24-type").textContent = typeof checked;
        </script>

        <div id="aom-25"><div></div></div>
        <div id="aom-25-code">e.ariaRequired=true;</div>

        <script>
          document.getElementById("aom-25").firstElementChild.ariaRequired=true;
          checked = document.getElementById("aom-25").firstElementChild.ariaRequired;
          document.getElementById("aom-25-checked").textContent = checked ? checked : "";           document.getElementById("aom-25-type").textContent = typeof checked;
        </script>

      </div>

    </contents>
  </slide>

  <slide>
    <title>Accessible Object Model (AOM): Gotchas</title>
    <contents>
        <ul>
          <li>Only values that have been set using the DOM property can be read using the DOM property.</li>
          <li>Not all ARIA properties will be implemented, notably ARIA properties related to <code>ID</code> references, like <code>aria-labelledby</code>, <code>aria-controls</code>, etc..., since the HTML specification is still defining how properties using <code>ID</code> references will be implemented in the DOM.</li>
          <li>Still determining whether string versus boolean values (or depends on how it was set) will be returned for some states with boolean values (e.g. <code>aria-checked</code>).</li>
        </ul>
    </contents>
  </slide>

   <slide>
    <title>Carousel Design Pattern and Examples</title>
    <contents>
      <p><a href="https://w3c.github.io/aria-practices/#carousel">Editors Draft of Carousel Design Pattern</a></p>
      <ul>
        <li>Keyboard interaction.</li>
        <li>Proper use of ARIA roles.</li>
        <li>Proper use of ARIA properties and states.</li>
        <li>Examples:
          <ul>
            <li><a href="https://raw.githack.com/w3c/aria-practices/update-carousel-previous-next/examples/carousel/carousel-1-prev-next.html?"  target="_example">Carousel using Previous and Next Buttons</a> (Note: raw.githack link ro pull request)</li>
            <li><a href="https://raw.githack.com/w3c/aria-practices/master/examples/carousel/carousel-2-tablist.html"  target="_example">Carousel using Tablist widget</a> (Note: raw.githack link to master branch)</li>
          </ul>
        </li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Combobox Design Pattern and Examples</title>
    <contents>
      <p><a href="https://w3c.github.io/aria-practices/#combobox">Editors Draft of Combobox Design Pattern</a></p>
      <ul>
        <li>Keyboard interaction.</li>
git        <li>Proper use of ARIA roles.</li>
        <li>Proper use of ARIA properties and states.</li>
        <li>Examples:
          <ul>
            <li><a href="https://w3c.github.io/aria-practices/examples/combobox/combobox-autocomplete-both.html"  target="_example">Combobox with auto-complete</a></li>
            <li><a href="https://raw.githack.com/w3c/aria-practices/issue34-add-combobox-datepicker/examples/combobox/combobox-datepicker.html" target="_example">Date picker combobox</a> (Note: raw.githack link to pull request)</li>
            <li>Newer examples support high contrast modes on Windows 10 and macOS.</li>
            <li><a href="https://github.com/w3c/aria-practices/blob/master/test/tests/combobox_autocomplete-both.js" target="_example">Regression tests for quality assurance</a> and can be used as models for in-house regression testing.</li>
          </ul>
        </li>
      </ul>
    </contents>
  </slide>

   <slide>
    <title>W3C ARIA Assistive Technology Project Community Group</title>
    <contents>
      <p><a href="https://www.w3.org/community/aria-at/" target="_group">ARIA-AT Community group</a> goals:</p>
      <ul>
        <li>Provide information on who ARIA changes the user experience for people with disabilities.</li>
        <li>Provide feedback to screen reader developers on how they provide ARIA information and expectations on what they should be providing.</li>
        <li>Improve consistency of information provided by different assistive technologies.</li>
        <li>Long term goal is to have tests for each ARIA Practices code example.</li>
      </ul>
      <p><iframe src="https://www.w3.org/community/aria-at/" title="ARIA-AT Community group website" width="98%" height="600px"></iframe></p>
    </contents>
  </slide>

   <slide>
    <title>Prototype of ARIA-AT Test Harness and Test Cases</title>
    <contents>
      <p><a href="https://aria-at.w3.org" target="_group">ARIA-AT group test harness</a> and test cases for:</p>
      <ul>
        <li>Checkboxes</li>
        <li>Menubar</li>
      </ul>
      <p><iframe src="https://aria-at.w3.org" title="ARIA-AT group test harness" width="98%" height="600px"></iframe></p>
    </contents>
  </slide>

  <slide>
    <title>Questions and Discussion</title>
    <contents>
      <details>
        <summary>Does anyone know what the acronym CPWA means?</summary>
        <ul>
          <li>Certified Professional in Web Accessibility (CWPA)</li>
          <li><a href="https://www.accessibilityassociation.org/certifications" target="_iaap">Certification options:</a>
            <ul>
              <li>Certified Professional in Accessibility Core Competencies (CPACC)</li>
              <li>Web Accessibility Specialist (WAS)</li>
              <li><abbr title="Certified Professional in Web Accessibility">CPWA</abbr> = <abbr title="Certified Professional in Accessibility Core Competencies">CPACC</abbr> + <abbr title=">Web Accessibility Specialist">WAS</abbr></li>
            </ul>
          </li>
        </ul>
      </details>
      <details style="margin-top: 3em">
        <summary>Interested in developing the open standards of the W3C?</summary>
        <ul>
          <li>University of Illinois is <a href="https://www.w3.org/Consortium/Member/List" target="_w3c">member of the W3C</a>.</li>
          <li><a href="https://www.w3.org/groups/" target="_w3c">Opportunities in developing open standards</a>:
            <ul>
              <li>Working Groups: Membership required or being an invited expert.</li>
              <li>Interest Groups: Anyone can join.</li>
              <li>Community Groups: Anyone can join.</li>
            </ul>
          </li>
          <li>Contact <a href="mailto:jongund@illinois.edu">Jon Gunderson</a> to get more information about joining a Working Group.</li>
          <li>Anyone can participate in Interest and Community Groups, but since Illinois is a W3C member you may need to setup a W3C account by contacting Jon Gunderson.</li>
        </ul>
      </details>
    </contents>
  </slide>

</slides>


